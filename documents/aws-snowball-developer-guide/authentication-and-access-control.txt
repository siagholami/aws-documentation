
This guide is for the Snowball Edge. If you are looking for documentation for the Snowball, see the AWS Snowball User Guide.

Access Control for Snow Family Console and Creating Jobs
As with all AWS services, access to AWS Snowball requires credentials that AWS can use to authenticate your requests. Those credentials must have permissions to access AWS resources, such an Amazon S3 bucket or an AWS Lambda function. AWS Snowball differs in two ways:


Jobs in AWS Snowball do not have Amazon Resource Names (ARNs).


Physical and network access control for a device on-premises is your responsibility.


The following sections provide details on how you can use AWS Identity and Access Management (IAM) and AWS Snowball to help secure your resources by controlling who can access them in the AWS Cloud, and also local access control recommendations.
 Authentication
 Access Control in the AWS Cloud
Authentication
You can access AWS as any of the following types of identities:
 AWS account root user –  When you first create an AWS account, you begin with a single sign-in identity that has complete access to all AWS services and resources in the account. This identity is called the AWS account root user and is accessed by signing in with the email address and password that you used to create the account. We strongly recommend that you do not use the root user for your everyday tasks, even the administrative ones. Instead, adhere to the best practice of using the root user only to create your first IAM user. Then securely lock away the root user credentials and use them to perform only a few account and service management tasks. 
 IAM user – An IAM user is an identity within your AWS account that has specific custom permissions (for example, permissions to create a job in AWS Snowball). You can use an IAM user name and password to sign in to secure AWS webpages like the AWS Management Console, AWS Discussion Forums, or the AWS Support Center.
In addition to a user name and password, you can also generate access keys for each user. You can use these keys when you access AWS services programmatically, either through one of the several SDKs or by using the AWS Command Line Interface (CLI). The SDK and CLI tools use the access keys to cryptographically sign your request. If you don’t use AWS tools, you must sign the request yourself. AWS Snowball supports Signature Version 4, a protocol for authenticating inbound API requests. For more information about authenticating requests, see Signature Version 4 Signing Process in the AWS General Reference.
 IAM role –  An IAM role is an IAM identity that you can create in your account that has specific permissions. An IAM role is similar to an IAM user in that it is an AWS identity with permissions policies that determine what the identity can and cannot do in AWS. However, instead of being uniquely associated with one person, a role is intended to be assumable by anyone who needs it. Also, a role does not have standard long-term credentials such as a password or access keys associated with it. Instead, when you assume a role, it provides you with temporary security credentials for your role session. IAM roles with temporary credentials are useful in the following situations:
 Federated user access –  Instead of creating an IAM user, you can use existing identities from AWS Directory Service, your enterprise user directory, or a web identity provider. These are known as federated users. AWS assigns a role to a federated user when access is requested through an identity provider. For more information about federated users, see Federated Users and Roles in the IAM User Guide. 




AWS service access –  A service role is an IAM role that a service assumes to perform actions in your account on your behalf. When you set up some AWS service environments, you must define a role for the service to assume. This service role must include all the permissions that are required for the service to access the AWS resources that it needs. Service roles vary from service to service, but many allow you to choose your permissions as long as you meet the documented requirements for that service. Service roles provide access only within your account and cannot be used to grant access to services in other accounts. You can create, modify, and delete a service role from within IAM. For example, you can create a role that allows Amazon Redshift to access an Amazon S3 bucket on your behalf and then load data from that bucket into an Amazon Redshift cluster. For more information, see Creating a Role to Delegate Permissions to an AWS Service in the IAM User Guide. 
 Applications running on Amazon EC2 –  You can use an IAM role to manage temporary credentials for applications that are running on an EC2 instance and making AWS CLI or AWS API requests. This is preferable to storing access keys within the EC2 instance. To assign an AWS role to an EC2 instance and make it available to all of its applications, you create an instance profile that is attached to the instance. An instance profile contains the role and enables programs that are running on the EC2 instance to get temporary credentials. For more information, see Using an IAM Role to Grant Permissions to Applications Running on Amazon EC2 Instances in the IAM User Guide. 


Overview of Managing Access Permissions to Your Resources in the AWS Cloud
Every AWS resource is owned by an AWS account, and permissions to create or access a resource are governed by permissions policies. An account administrator can attach permissions policies to IAM identities (that is, users, groups, and roles), and some services (such as AWS Lambda) also support attaching permissions policies to resources. 
Note
An account administrator (or administrator user) is a user with administrator privileges. For more information, see IAM Best Practices in the IAM User Guide.
When granting permissions, you decide who is getting the permissions, the resources they get permissions for, and the specific actions that you want to allow on those resources.
Topics
 Resources and Operations
 Understanding Resource Ownership
 Managing Access to Resources in the AWS Cloud
 Specifying Policy Elements: Actions, Effects, and Principals
 Specifying Conditions in a Policy
Resources and Operations
In AWS Snowball, the primary resource is a job. AWS Snowball also has devices like the Snowball and the AWS Snowball Edge device, however, you can only use those devices in the context of an existing job. Amazon S3 buckets and Lambda functions are resources of Amazon S3 and Lambda respectively.
As mentioned previously, jobs don't have Amazon Resource Names (ARNs) associated with them. However, other services' resources, like Amazon S3 buckets, do have unique (ARNs) associated with them as shown in the following table.



Resource Type
ARN Format




File system
arn:aws:s3:region:account-id:BucketName/ObjectName



AWS Snowball provides a set of operations to create and manage jobs. For a list of available operations, see the AWS Snowball API Reference.
Understanding Resource Ownership
The AWS account owns the resources that are created in the account, regardless of who created the resources. Specifically, the resource owner is the AWS account of the principal entity (that is, the root account, an IAM user, or an IAM role) that authenticates the resource creation request. The following examples illustrate how this works:
 If you use the root account credentials of your AWS account to create a file system, your AWS account is the owner of the resource (in AWS Snowball, the resource is the job).
 If you create an IAM user in your AWS account and grant permissions to create a job to that user, the user can create a job. However, your AWS account, to which the user belongs, owns the job resource.
 If you create an IAM role in your AWS account with permissions to create a job, anyone who can assume the role can create a job. Your AWS account, to which the role belongs, owns the job resource. 
Managing Access to Resources in the AWS Cloud
A permissions policy describes who has access to what. The following section explains the available options for creating permissions policies.
Note
This section discusses using IAM in the context of AWS Snowball. It doesn't provide detailed information about the IAM service. For complete IAM documentation, see What Is IAM? in the IAM User Guide. For information about IAM policy syntax and descriptions, see AWS IAM Policy Reference in the IAM User Guide.
Policies attached to an IAM identity are referred to as identity-based policies (IAM polices) and policies attached to a resource are referred to as resource-based policies. AWS Snowball supports only identity-based policies (IAM policies). 
Topics
 Identity-Based Policies (IAM Policies)
 Resource-Based Policies
Identity-Based Policies (IAM Policies)
You can attach policies to IAM identities. For example, you can do the following:
 Attach a permissions policy to a user or a group in your account – To grant a user permissions to create a job, you can attach a permissions policy to a user or group that the user belongs to.
 Attach a permissions policy to a role (grant cross-account permissions) – You can attach an identity-based permissions policy to an IAM role to grant cross-account permissions. For example, the administrator in Account A can create a role to grant cross-account permissions to another AWS account (for example, Account B) or an AWS service as follows:


Account A administrator creates an IAM role and attaches a permissions policy to the role that grants permissions on resources in Account A.


Account A administrator attaches a trust policy to the role identifying Account B as the principal who can assume the role. 


Account B administrator can then delegate permissions to assume the role to any users in Account B. Doing this allows users in Account B to create or access resources in Account A. The principal in the trust policy can also be an AWS service principal if you want to grant an AWS service permissions to assume the role.


For more information about using IAM to delegate permissions, see Access Management in the IAM User Guide.
The following is an example policy that allows a user to perform the CreateJob action for your AWS account.
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "",
      "Effect": "Allow",
      "Principal": {
        "Service": "importexport.amazonaws.com"
      },
      "Action": "sts:AssumeRole",
      "Condition": {
        "StringEquals": {
          "sts:ExternalId": "AWSIE"
        }
      }
    }
  ]
}
For more information about using identity-based policies with AWS Snowball, see Using Identity-Based Policies (IAM Policies) for AWS Snowball. For more information about users, groups, roles, and permissions, see Identities (Users, Groups, and Roles) in the IAM User Guide. 
Resource-Based Policies
Other services, such as Amazon S3, also support resource-based permissions policies. For example, you can attach a policy to an S3 bucket to manage access permissions to that bucket. AWS Snowball doesn't support resource-based policies. 
Specifying Policy Elements: Actions, Effects, and Principals
For each job (see Resources and Operations), the service defines a set of API operations (see AWS Snowball API Reference) to create and manage said job. To grant permissions for these API operations, AWS Snowball defines a set of actions that you can specify in a policy. For example, for a job, the following actions are defined: CreateJob, CancelJob, and DescribeJob. Note that, performing an API operation can require permissions for more than one action.
The following are the most basic policy elements:
 Resource – In a policy, you use an Amazon Resource Name (ARN) to identify the resource to which the policy applies. For more information, see Resources and Operations.
Note
This is supported for Amazon S3 only.
Snowball does not support specifying a resource ARN in the Resource element of an IAM policy statement. To allow access to Snowball, specify “Resource”: “*” in your policy.
 Action – You use action keywords to identify resource operations that you want to allow or deny. For example, depending on the specified Effect, snowball:* either allows or denies the user permissions to perform all operations.
Note
This is supported for Amazon EC2, Amazon S3, and IAM.
 Effect – You specify the effect when the user requests the specific action—this can be either allow or deny. If you don't explicitly grant access to (allow) a resource, access is implicitly denied. You can also explicitly deny access to a resource, which you might do to make sure that a user cannot access it, even if a different policy grants access.
Note
This is supported for Amazon EC2, Amazon S3, and IAM.
 Principal – In identity-based policies (IAM policies), the user that the policy is attached to is the implicit principal. For resource-based policies, you specify the user, account, service, or other entity that you want to receive permissions (applies to resource-based policies only). AWS Snowball doesn't support resource-based policies.
To learn more about IAM policy syntax and descriptions, see AWS IAM Policy Reference in the IAM User Guide.
For a table showing all of the AWS Snowball API actions, see AWS Snowball API Permissions: Actions, Resources, and Conditions Reference.
Specifying Conditions in a Policy
When you grant permissions, you can use the IAM policy language to specify the conditions when a policy should take effect. For example, you might want a policy to be applied only after a specific date. For more information about specifying conditions in a policy language, see Condition in the IAM User Guide. 
To express conditions, you use predefined condition keys. There are no condition keys specific to AWS Snowball. However, there are AWS-wide condition keys that you can use as appropriate. For a complete list of AWS-wide keys, see Available Keys for Conditions in the IAM User Guide. 