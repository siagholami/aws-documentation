Creating an AWS Lambda Function
You can call Amazon Rekognition Custom Labels API operations from within an AWS Lambda function. The following instructions show how to create a Lambda function in Python that calls DetectCustomLabels. It returns a list of custom label objects. To run this example, you need an Amazon S3 bucket that contains an image in PNG or JPEG format.
Step 1: Create an AWS Lambda deployment package


Open a command window.


Enter the following commands to create a deployment package with the most recent version of the AWS SDK.


pip install boto3 --target python/.
   zip boto3-layer.zip -r python/
Step 2: Create an AWS Lambda function (console)


Sign in to the AWS Management Console and open the AWS Lambda console at https://console.aws.amazon.com/lambda/.


Choose Create function. For more information, see Create a Lambda Function with the Console.


Choose the following options.
    Choose Author from scratch. 
    Enter a value for Function name.
    For Runtime choose Python 3.7 or Python 3.6.
    For Choose or create an execution role, choose Create a new role with basic Lambda permissions. 


Choose Create function to create the AWS Lambda function.


Open the IAM console at https://console.aws.amazon.com/iam/.


From the navigation pane, choose Roles.


From the resources list, choose the IAM role that AWS Lambda created for you. The role name is prepended with the name of your Lambda function.


In the Permissions tab, choose Attach policies.


Add the AmazonRekognitionFullAccess and AmazonS3ReadOnlyAccess policies.


Choose Attach Policy.


Step 3: Create and add a layer (console)


Open the AWS Lambda console at https://console.aws.amazon.com/lambda/.


In the navigation pane, choose Layers. 


Choose Create layer.


Enter values for Name and Description.


For Code entry type, choose Upload .zip file and choose Upload.


In the dialog box, choose the zip file (boto3-layer.zip) that you created in Step 1: Create an AWS Lambda deployment package.


For compatible runtimes, choose the runtime that you chose in Step 2: Create an AWS Lambda function (console).


Choose Create to create the layer.


Choose the navigation pane menu icon.


In the navigation pane, choose Functions.


In the resources list, choose the function that you created in Step 2: Create an AWS Lambda function (console). 


In the Designer section of the Configuration tab, choose Layers (under your Lambda function name). 


In the Layers section, choose Add a layer.


Choose Select from list of runtime compatible layers.


In Compatible layers, choose the Name and Version of the layer name and version that you created in step 3.


Choose Add.


Step 4: Add Python code (console)


In Designer, choose your function name.


In the function code editor, add the following to the file lambda_function.py. Change the values of bucket and photo to your bucket and image. Change the value of model_arn to the Amazon Resource Name (ARN) of your Amazon Rekognition Custom Labels model.


```
   import json
   import boto3
def lambda_handler(event, context):
   bucket="bucket"
   photo="image"
   model_arn='model arn'

   client=boto3.client('rekognition')

   #process using S3 object

   response = client.detect_custom_labels(Image={'S3Object': {'Bucket': bucket, 'Name': photo}},
       MinConfidence=30,
       ProjectVersionArn=model_arn)

   #Get the custom labels
   labels=response['CustomLabels']

   return {
       'statusCode': 200,
       'body': json.dumps(labels)
   }

```

Choose Save to save your Lambda function.

Step 5: Test your Lambda function (console)


Choose Test.


Enter a value for Event name.


Choose Create.


Choose Test. The Lambda function is invoked. The output is displayed in the Execution results pane of the code editor. The output is a list of custom labels.


If the AWS Lambda function returns a timeout error, a call to an Amazon Rekognition Custom Labels API operation might be the cause. For information about extending the timeout period for an AWS Lambda function, see AWS Lambda Function Configuration.
For information about invoking a Lambda function from your code, see Invoking AWS Lambda Functions. 