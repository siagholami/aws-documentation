AWS managed policies for job functions
AWS managed policies for job functions are designed to closely align to common job functions in the IT industry. You can use these policies to easily grant the permissions needed to carry out the tasks expected of someone in a specific job function. These policies consolidate permissions for many services into a single policy that's easier to work with than having permissions scattered across many policies.
You can attach these policies for job functions to any group, user, or role. 
Use Roles to Combine Services
Some of the policies use IAM service roles to help you take advantage of features found in other AWS services. These policies grant access to iam:passrole, which allows a user with the policy to pass a role to an AWS service. This role delegates IAM permissions to the AWS service to carry out actions on your behalf.
You must create the roles according to your needs. For example, the Network Administrator policy allows a user with the policy to pass a role named "flow-logs-vpc" to the Amazon CloudWatch service. CloudWatch uses that role to log and capture IP traffic for VPCs created by the user.
To follow security best practices, the policies for job functions include filters that limit the names of valid roles that can be passed. This helps avoid granting unnecessary permissions. If your users do require the optional service roles, you must create a role that follows the naming convention specified in the policy. You then grant permissions to the role. Once that is done, the user can configure the service to use the role, granting it whatever permissions the role provides.
Keep Up to Date
These policies are all maintained by AWS and are kept up to date to include support for new services and new capabilities as they are added by AWS. These policies cannot be modified by customers. You can make a copy of the policy and then modify the copy, but that copy is not automatically updated as AWS introduces new services and API operations.
Job functions
Topics
 Administrator
 Billing
 Database administrator
 Data scientist
 Developer power user
 Network administrator
 Security auditor
 Support user
 System administrator
 View-only user
In the following sections, each policy's name is a link to the policy details page in the AWS Management Console. There you can see the policy document and review the permissions it grants.
Administrator
AWS managed policy name: AdministratorAccess
Use case: This user has full access and can delegate permissions to every service and resource in AWS.
Policy description: This policy grants all actions for all AWS services and for all resources in the account. 
Note
Before an IAM user or role can access the AWS Billing and Cost Management console with the permissions in this policy, you must first activate IAM user and role access. To do this, follow the instructions in Step 1 of the tutorial about delegating access to the billing console.
Billing
AWS managed policy name: Billing
Use case: This user needs to view billing information, set up payments, and authorize payments. The user can monitor the costs accumulated for the entire AWS service.
Policy description: This policy grants full permissions for managing billing, costs, payment methods, budgets, and reports.
Note
Before an IAM user or role can access the AWS Billing and Cost Management console with the permissions in this policy, you must first activate IAM user and role access. To do this, follow the instructions in Step 1 of the tutorial about delegating access to the billing console.
Database administrator
AWS managed policy name: DatabaseAdministrator
Use case: This user sets up, configures, and maintains databases in the AWS Cloud.
Policy description: This policy grants permissions to create, configure, and maintain databases. It includes access to AWS database services, such as Amazon DynamoDB, Amazon Relational Database Service (RDS), and Amazon Redshift. View the policy for the full list of database services that this policy supports.
This job function policy supports the ability to pass roles to AWS services. The policy allows the iam:PassRole action for only those roles named in the following table. For more information, see Creating roles and attaching policies (console) later in this topic.
Optional IAM service roles for the database administrator job function 



Use case
Role name (* is a wildcard)
Service role type to select
Select this AWS managed policy




Allow the user to monitor RDS databases
rds-monitoring-role
Amazon RDS Role for Enhanced Monitoring
AmazonRDSEnhancedMonitoringRole


Allow AWS Lambda to monitor your database and access external databases
rdbms-lambda-access
Amazon EC2
AWSLambdaFullAccess


Allow Lambda to upload files to Amazon S3 and to Amazon Redshift clusters with DynamoDB
lambda_exec_role
AWS Lambda
Create a new managed policy as defined in the AWS Big Data Blog


Allow Lambda functions to act as triggers for your DynamoDB tables
lambda-dynamodb-*
AWS Lambda
AWSLambdaDynamoDBExecutionRole


Allow Lambda functions to access Amazon RDS in a VPC
lambda-vpc-execution-role
Create a role with a trust policy as defined in the AWS Lambda Developer Guide
AWSLambdaVPCAccessExecutionRole


Allow AWS Data Pipeline to access your AWS resources
DataPipelineDefaultRole
Create a role with a trust policy as defined in the AWS Data Pipeline Developer Guide
AWSDataPipelineRole


Allow your applications running on Amazon EC2 instances to access your AWS resources
DataPipelineDefaultResourceRole
Create a role with a trust policy as defined in the AWS Data Pipeline Developer Guide
AmazonEC2RoleforDataPipelineRole



Data scientist
AWS managed policy name: DataScientist
Use case: This user runs Hadoop jobs and queries. The user also accesses and analyzes information for data analytics and business intelligence.
Policy description: This policy grants permissions to create, manage, and run queries on an Amazon EMR cluster and perform data analytics with tools such as Amazon QuickSight. The policy includes access to additional data scientist services, such as AWS Data Pipeline, Amazon EC2, Amazon Kinesis, Amazon Machine Learning, and SageMaker. View the policy for the full list of data scientist services that this policy supports.
This job function policy supports the ability to pass roles to AWS services. One statement allows passing any role to SageMaker. Another statement allows the iam:PassRole action for only those roles named in the following table. For more information, see Creating roles and attaching policies (console) later in this topic.
Optional IAM service roles for the data scientist job function 



Use case
Role name (* is a wildcard)
Service role type to select
AWS managed policy to select




Allow Amazon EC2 instances access to services and resources suitable for clusters
EMR-EC2_DefaultRole
Amazon EMR for EC2
AmazonElasticMapReduceforEC2Role


Allow Amazon EMR access to access the Amazon EC2 service and resources for clusters
EMR_DefaultRole
Amazon EMR
AmazonElasticMapReduceRole


Allow Kinesis Kinesis Data Analytics to access streaming data sources
kinesis-*
Create a role with a trust policy as defined in the AWS Big Data Blog.
See the AWS Big Data Blog, which outlines four possible options depending on your use case


Allow AWS Data Pipeline to access your AWS resources
DataPipelineDefaultRole
Create a role with a trust policy as defined in the AWS Data Pipeline Developer Guide
AWSDataPipelineRole


Allow your applications running on Amazon EC2 instances to access your AWS resources
DataPipelineDefaultResourceRole
Create a role with a trust policy as defined in the AWS Data Pipeline Developer Guide
AmazonEC2RoleforDataPipelineRole



Developer power user
AWS managed policy name: PowerUserAccess
Use case: This user performs application development tasks and can create and configure resources and services that support AWS aware application development.
Policy description: The first statement of this policy uses the NotAction element to allow all actions for all AWS services and for all resources except AWS Identity and Access Management and AWS Organizations. The second statement grants IAM permissions to create a service-linked role. This is required by some services that must access resources in another service, such as an Amazon S3 bucket. It also grants Organizations permissions to view information about the user's organization, including the master account email and organization limitations.
Network administrator
AWS managed policy name: NetworkAdministrator
Use case: This user is tasked with setting up and maintaining AWS network resources.
Policy description: This policy grants permissions to create and maintain network resources in Auto Scaling, Amazon EC2, AWS Direct Connect, RouteÂ 53, Amazon CloudFront, Elastic Load Balancing, AWS Elastic Beanstalk, Amazon SNS, CloudWatch, CloudWatch Logs, Amazon S3, IAM, and Amazon Virtual Private Cloud.
This job function requires the ability to pass roles to AWS services. The policy grants iam:GetRole and iam:PassRole for only those roles named in the following table. For more information, see Creating roles and attaching policies (console) later in this topic.
Optional IAM service roles for the network administrator job function 



Use case
Role name (* is a wildcard)
Service role type to select
AWS managed policy to select




Allows Amazon VPC to create and manage logs in CloudWatch Logs on the user's behalf to monitor IP traffic going in and out of your VPC
flow-logs-*
Create a role with a trust policy as defined in the Amazon VPC User Guide
This use case does not have an existing AWS managed policy, but the documentation lists the required permissions. See Amazon VPC User Guide.



Security auditor
AWS managed policy name: SecurityAudit
Use case: This user monitors accounts for compliance with security requirements. This user can access logs and events to investigate potential security breaches or potential malicious activity.
Policy description: This policy grants permissions to view configuration data for many AWS services and to review their logs. 
Support user
AWS managed policy name: SupportUser
Use case: This user contacts AWS Support, creates support cases, and views the status of existing cases.
Policy description: This policy grants permissions to create and update AWS Support cases.
System administrator
AWS managed policy name: SystemAdministrator
Use case: This user sets up and maintains resources for development operations.
Policy description: This policy grants permissions to create and maintain resources across a large variety of AWS services, including AWS CloudTrail, Amazon CloudWatch, AWS CodeCommit, AWS CodeDeploy, AWS Config, AWS Directory Service, Amazon EC2, AWS Identity and Access Management, AWS Key Management Service, AWS Lambda, Amazon RDS, RouteÂ 53, Amazon S3, Amazon SES, Amazon SQS, AWS Trusted Advisor, and Amazon VPC.
This job function requires the ability to pass roles to AWS services. The policy grants iam:GetRole and iam:PassRole for only those roles named in the following table. For more information, see Creating roles and attaching policies (console) later in this topic.
Optional IAM service roles for the system administrator job function 



Use case
Role name (* is a wildcard)
Service role type to select
AWS managed policy to select




Allow apps running in EC2 instances in an Amazon ECS cluster to access Amazon ECS
ecr-sysadmin-*
Amazon EC2 Role for EC2 Container Service
AmazonEC2ContainerServiceforEC2Role


Allow a user to monitor databases
rds-monitoring-role
Amazon RDS Role for Enhanced Monitoring
AmazonRDSEnhancedMonitoringRole


Allow apps running in EC2 instances to access AWS resources.
ec2-sysadmin-*
Amazon EC2
Sample policy for role that grants access to an S3 bucket as shown in the Amazon EC2 User Guide for Linux Instances; customize as needed


Allow Lambda to read DynamoDB streams and write to CloudWatch Logs
lambda-sysadmin-*
AWS Lambda
AWSLambdaDynamoDBExecutionRole



View-only user
AWS managed policy name: ViewOnlyAccess
Use case: This user can view a list of AWS resources and basic metadata in the account across all services. The user cannot read resource content or metadata that goes beyond the quota and list information for resources.
Policy description: This policy grants List*, Describe*, Get*, View*, and Lookup* access to resources for most AWS services. To see what actions this policy includes for each service, see ViewOnlyAccess.
Creating roles and attaching policies (console)
Several of the previously listed policies grant the ability to configure AWS services with roles that enable those services to perform operations on your behalf. The job function policies either specify exact role names that you must use or at least include a prefix that specifies the first part of the name that can be used. To create one of these roles, perform the steps in the following procedure.
To create a role for an AWS service (IAM console)


Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.


In the navigation pane of the IAM console, choose Roles, and then choose Create role.


Choose the AWS service role type, and then choose the service that you want to allow to assume this role.


Choose the use case for your service. If the specified service has only one use case, it is selected for you. Use cases are defined by the service to include the trust policy that the service requires. Then choose Next: Permissions.


If possible, select the policy to use for the permissions policy or choose Create policy to open a new browser tab and create a new policy from scratch. For more information, see step 4 in the procedure Creating IAM policies in the IAM User Guide. After you create the policy, close that tab and return to your original tab. Select the check box next to the permissions policies that you want the service to have.


Depending on the use case that you selected, the service might allow you to do any of the following:
    Nothing, because the service defines the permissions for the role
    Allow you to choose from a limited set of permissions
    Allow you to choose from any permissions
    Allow you to select no policies at this time, create the policies later, and then attach them to the role

(Optional) Set a permissions boundary. This is an advanced feature that is available for service roles, but not service-linked roles. 

Expand the Set permissions boundary section and choose Use a permissions boundary to control the maximum role permissions. IAM includes a list of the AWS managed and customer managed policies in your account. Select the policy to use for the permissions boundary or choose Create policy to open a new browser tab and create a new policy from scratch. For more information, see step 4 in the procedure Creating IAM policies in the IAM User Guide. After you create the policy, close that tab and return to your original tab to select the policy to use for the permissions boundary.


Choose Next: Tags.


(Optional) Add metadata to the user by attaching tags as key-value pairs. For more information about using tags in IAM, see Tagging IAM Entities in the IAM User Guide.


Choose Next: Review.


For Role name, the degree of role name customization is defined by the service. If the service defines the role's name, this option is not editable. In other cases, the service might define a prefix for the role and allow you to enter an optional suffix. Some services allow you to specify the entire name of your role.


If possible, enter a role name or role name suffix to help you identify the purpose of this role. Role names must be unique within your AWS account. They are not distinguished by case. For example, you cannot create roles named both PRODROLE and prodrole. Because various entities might reference the role, you cannot edit the name of the role after it has been created.


(Optional) For Role description, enter a description for the new role.


Review the role and then choose Create role.


Example 1: Configuring a user as a database administrator (console)
This example shows the steps required to configure Alice, an IAM user, as a Database Administrator. You use the information in first row of the table in that section and allow the user to enable Amazon RDS monitoring. You attach the DatabaseAdministrator policy to Alice's IAM user so that she can manage the Amazon database services. That policy also enables Alice to pass a role called rds-monitoring-role to the Amazon RDS service that allows the service to monitor the RDS databases on her behalf.


Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.


Choose Policies and then type database in the search box.


Select the check box for the DatabaseAdministrator policy, choose Policy actions, and then choose Attach.


In the list of users, select Alice and then choose Attach policy. Alice now can administer AWS databases. However, to allow Alice to monitor those databases, you must configure the service role.


In the navigation pane of the IAM console, choose Roles, and then choose Create role.


Choose the AWS Service role type, and then choose Amazon RDS.


Choose the Amazon RDS Role for Enhanced Monitoring use case.


Amazon RDS defines the permissions for your role. Choose Next: Review to continue.


The role name must be one of those specified by the DatabaseAdministrator policy that Alice now has. One of those is rds-monitoring-role. Type that for the Role name.


(Optional) For Role description, type a description for the new role.


After you review the details, choose Create role.


Alice can now enable RDS Enhanced Monitoring in the Monitoring section of the Amazon RDS console. For example, she might do this when she creates a DB instance, creates a read replica, or modifies a DB instance. She must type the role name she created (rds-monitoring-role) in the Monitoring Role box when she sets Enable Enhanced Monitoring to Yes. 


Example 2: Configuring a user as a network administrator (console)
This example shows the steps required to configure Juan, an IAM user, as a Network Administrator. It uses the information in the table in that section to allow Juan to monitor IP traffic going to and from a VPC. It also allows Juan to capture that information in the logs in CloudWatch Logs. You attach the NetworkAdministrator policy to Juan's IAM user so that he can configure AWS network resources. That policy also enables Juan to pass a role whose name begins with flow-logs* to Amazon EC2 when you create a flow log. In this scenario, unlike Example 1, there isn't a predefined service role type, so you must perform a few steps differently.


Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.


In the navigation pane, choose Policies and then type network in the search box.


Select the check box next to NetworkAdministrator policy, choose Policy actions, and then choose Attach.


In the list of users, select the check box next to Juan and then choose Attach policy. Juan now can administer AWS network resources. However, to enable monitoring of IP traffic in your VPC, you must configure the service role.


Because the service role you need to create doesn't have a predefined managed policy, you must first create it. In the navigation pane, choose Policies, then choose Create policy.


Choose the JSON tab and copy the text from the following JSON policy document. Paste this text into the JSON text box. 


{
     "Version": "2012-10-17",
     "Statement": [
       {
         "Action": [
           "logs:CreateLogGroup",
           "logs:CreateLogStream",
           "logs:PutLogEvents",
           "logs:DescribeLogGroups",
           "logs:DescribeLogStreams"
         ],
         "Effect": "Allow",
         "Resource": "*"
       }
     ]
   }


When you are finished, choose Review policy. The Policy Validator reports any syntax errors.
Note
You can switch between the Visual editor and JSON tabs any time. However, if you make changes or choose Review policy in the Visual editor tab, IAM might restructure your policy to optimize it for the visual editor. For more information, see Policy restructuring.


On the Review page, type vpc-flow-logs-policy-for-service-role for the policy name. Review the policy Summary to see the permissions granted by your policy, and then choose Create policy to save your work.


The new policy appears in the list of managed policies and is ready to attach.


In the navigation pane of the IAM console, choose Roles, and then choose Create role.


Choose the AWS Service role type, and then choose Amazon EC2.


Choose the Amazon EC2 use case.


On the Attach permissions policies page, choose the policy you created earlier, vpc-flow-logs-policy-for-service-role, and then choose Next: Review.


The role name must be permitted by the NetworkAdministrator policy that Juan now has. Any name that begins with flow-logs- is allowed. For this example, type flow-logs-for-juan for the Role name.


(Optional) For Role description, type a description for the new role.


After you review the details, choose Create role.


Now you can configure the trust policy required for this scenario. On the Roles page, choose the flow-logs-for-juan role (the name, not the check box). On the details page for your new role, choose the Trust relationships tab, and then choose Edit trust relationship.


Change the "Service" line to read as follows, replacing the entry for ec2.amazonaws.com:


"Service": "vpc-flow-logs.amazonaws.com"

Juan can now create flow logs for a VPC or subnet in the Amazon EC2 console. When you create the flow log, specify the flow-logs-for-juan role. That role has the permissions to create the log and write data to it.
