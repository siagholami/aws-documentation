Importing existing resources into a stack
During this import operation, you need to provide the following.
 A template that describes the entire stack, including both the resources that are already part of the stack and the resources to import. Each resource to import must have a DeletionPolicy attribute in your template.
 A unique identifier for each target resource. Visit the appropriate service console to obtain unique identifiers.
In this walkthrough, we provide the following example template, called templateToImport.json. ServiceTable is currently part of the stack, and GamesTable is the target of the import.
{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Import test",
    "Resources": {
         "ServiceTable":{
           "Type":"AWS::DynamoDB::Table",
           "Properties":{
              "TableName":"Service",
              "AttributeDefinitions":[
                 {
                    "AttributeName":"key",
                    "AttributeType":"S"
                 }
              ],
              "KeySchema":[
                 {
                    "AttributeName":"key",
                    "KeyType":"HASH"
                 }
              ],
              "ProvisionedThroughput":{
                 "ReadCapacityUnits":5,
                 "WriteCapacityUnits":1
              }
           }
        },
        "GamesTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
                "TableName": "Games",
                "AttributeDefinitions": [
                    {
                        "AttributeName": "key",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "key",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 1
                }
            }
        }
    }
}
Import an existing resource into a stack using the AWS CloudFormation console


Open the AWS CloudFormation console.


On the Stacks page, choose the stack you want to import resources into.


Choose Stack actions, and then choose Import resources into stack.



Review the Import overview page, and then choose Next.


On the Specify template page, provide your updated template using one of the following methods, and then choose Next.
    Choose Amazon S3 URL, and then specify the URL for your template in the text box.
    Choose Upload a template file, and then browse for your template.


On the Identify resources page, identify each target resource.


Under Identifier property, choose the type of resource identifier. For example, the AWS::DynamoDB::Table resource can be identified using the TableName property.


Under Identifier value, type the actual property value. For example, the TableName for the GamesTable resource in the example template is Games.



Choose Next.


On the Specify stack details page, update any parameters, and then choose Next. This automatically creates a change set.
Note
The import operation fails if you modify existing parameters that trigger a create, update, or delete operation.


On the Review stack-name page, review the resources to import, and then choose Import resources. This automatically executes the change set created in the last step. Any stack-level tags are applied to imported resources at this time.


The Events page for the stack displays. 



(Optional) Run drift detection on the stack to make sure the template and actual configuration of the imported resources match. For more information about detecting drift, see Detect drift on an entire CloudFormation stack.


(Optional) If your imported resources don't match their expected template configurations, either correct the template configurations or update the resources directly. In this walkthrough, we correct the template configurations to match their actual configurations.


Revert the import operation for the affected resources.


Add the import targets to your template again, making sure that the template configurations match the actual configurations.


Repeat steps 2-9 using the modified template to import the resources again.


Import an existing resource into a stack using the AWS CLI

Optionally run GetTemplateSummary to learn which properties identify each resource type in the template. For example, the AWS::DynamoDB::Table resource can be identified using the TableName property. For the GamesTable resource in the example template, the value of TableName is Games.

```

aws cloudformation get-template-summary 
       --template-body file://templateToImport.json
   ```


Compose a list of resources to import and their unique identifiers in the following format.

"[{\"ResourceType\":\"AWS::DynamoDB::Table\",\"LogicalResourceId\":\"GamesTable\",\"ResourceIdentifier\":{\"TableName\":\"Games\"}}]"

Create a change set of type IMPORT with the following parameters. --resources-to-import does not support inline YAML.

```

aws cloudformation create-change-set
       --stack-name TargetStack --change-set-name ImportChangeSet
       --change-set-type IMPORT
       --resources-to-import "[{\"ResourceType\":\"AWS::DynamoDB::Table\",\"LogicalResourceId\":\"GamesTable\",\"ResourceIdentifier\":{\"TableName\":\"Games\"}}]"
       --template-body file://templateToImport.json
   ```

The AWS CLI also supports text files as input for the resources-to-import parameter, as shown in the following example. 
--resources-to-import: file://resourcesToImport.txt
In this walkthrough, file://resourcesToImport.txt contains the following.
[
     {
         "ResourceType":"AWS::DynamoDB::Table",
         "LogicalResourceId":"GamesTable",
         "ResourceIdentifier": {
           "TableName":"Games"
         }
     }
   ]

Review the change set to make sure the correct resources will be imported.

```

aws cloudformation describe-change-set --change-set-name ImportChangeSet --stack-name TargetStack
   ```


Execute the change set to import the resources. Any stack-level tags are applied to imported resources at this time. On successful completion of the operation (IMPORT_COMPLETE), the resources are successfully imported.

```

aws cloudformation execute-change-set --change-set-name ImportChangeSet --stack-name TargetStack
   ```


(Optional) Run drift detection on the IMPORT_COMPLETE stack to make sure the template and actual configuration of the imported resources match. For more information about detecting drift, see Detect drift on an entire CloudFormation stack. 

```

aws cloudformation detect-stack-drift --stack-name TargetStack
   { "Stack-Drift-Detection-Id" : "624af370-311a-11e8-b6b7-500cexample" }
aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id 624af370-311a-11e8-b6b7-500cexample
aws cloudformation describe-stack-resource-drifts --stack-name TargetStack
   ```



(Optional) If your imported resources don't match their expected template configurations, either correct the template configurations or update the resources directly. In this walkthrough, we correct the template configurations to match their actual configurations.


Revert the import operation for the affected resources.


Add the import targets to your template again, making sure that the template configurations match the actual configurations.


Repeat steps 3-6 using the modified template to import the resources again.

