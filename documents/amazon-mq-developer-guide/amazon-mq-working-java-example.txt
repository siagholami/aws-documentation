Working Examples of Using Java Message Service (JMS) with ActiveMQ
The following examples show how you can work with ActiveMQ programmatically:
 The OpenWire example Java code connects to a broker, creates a queue, and sends and receives a message. For a detailed breakdown and explanation, see Tutorial: Connecting a Java Application to Your Amazon MQ Broker.
 The MQTT example Java code connects to a broker, creates a topic, and publishes and receives a message.
 The STOMPWSS example Java code connects to a broker, creates a queue, and publishes and receives a message.
Prerequisites
Enable VPC Attributes
To ensure that your broker is accessible within your VPC, you must enable the enableDnsHostnames and enableDnsSupport VPC attributes. For more information, see DNS Support in your VPC in the Amazon VPC User Guide.
Enable Inbound Connections


Sign in to the Amazon MQ console.


From the broker list, choose the name of your broker (for example, MyBroker).


On the MyBroker page, in the Connections section, note the addresses and ports of the broker's ActiveMQ Web Console URL and wire-level protocols.


In the Details section, under Security and network, choose the name of your security group or .


The Security Groups page of the EC2 Dashboard is displayed.


From the security group list, choose your security group.


At the bottom of the page, choose Inbound, and then choose Edit.


In the Edit inbound rules dialog box, add a rule for every URL or endpoint that you want to be publicly accessible (the following example shows how to do this for an ActiveMQ Web Console).


Choose Add Rule.


For Type, select Custom TCP.


For Port Range, type the ActiveMQ Web Console port (8162).


For Source, leave Custom selected and then type the IP address of the system that you want to be able to access the ActiveMQ Web Console (for example, 192.0.2.1).


Choose Save.
Your broker can now accept inbound connections.


Add Java Dependencies

[ OpenWire ]
Add the activemq-client.jar and activemq-pool.jar packages to your Java class path. The following example shows these dependencies in a Maven project pom.xml file.
<dependencies>
    <dependency>
        <groupId>org.apache.activemq</groupId>
        <artifactId>activemq-client</artifactId>
        <version>5.15.8</version>
    </dependency>
    <dependency>
        <groupId>org.apache.activemq</groupId>
        <artifactId>activemq-pool</artifactId>
        <version>5.15.8</version>
    </dependency>
</dependencies>
For more information about activemq-client.jar, see Initial Configuration in the Apache ActiveMQ documentation.

[ MQTT ]
Add the org.eclipse.paho.client.mqttv3.jar package to your Java class path. The following example shows this dependency in a Maven project pom.xml file.
<dependencies>
    <dependency>
        <groupId>org.eclipse.paho</groupId>
        <artifactId>org.eclipse.paho.client.mqttv3</artifactId>
        <version>1.2.0</version>
    </dependency>                               
</dependencies>
For more information about org.eclipse.paho.client.mqttv3.jar, see Eclipse Paho Java Client.

[ STOMPWSS ]
Add the following packages to your Java class path:
 spring-messaging.jar
 spring-websocket.jar
 javax.websocket-api.jar
 jetty-all.jar
 slf4j-simple.jar
 jackson-databind.jar
The following example shows these dependencies in a Maven project pom.xml file.
<dependencies>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-messaging</artifactId>
        <version>5.0.5.RELEASE</version>
    </dependency>
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-websocket</artifactId>
        <version>5.0.5.RELEASE</version>
    </dependency>
    <dependency>
        <groupId>javax.websocket</groupId>
        <artifactId>javax.websocket-api</artifactId>
        <version>1.1</version>
    </dependency>
    <dependency>
        <groupId>org.eclipse.jetty.aggregate</groupId>
        <artifactId>jetty-all</artifactId>
        <type>pom</type>
        <version>9.3.3.v20150827</version>
    </dependency>
    <dependency>
        <groupId>org.slf4j</groupId>
        <artifactId>slf4j-simple</artifactId>
        <version>1.6.6</version>
    </dependency>
    <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-databind</artifactId>
        <version>2.5.0</version>
    </dependency>
</dependencies>
For more information, see STOMP Support in the Spring Framework documentation.

AmazonMQExample.java
Important
In the following example code, producers and consumers run in a single thread. For production systems (or to test broker instance failover), make sure that your producers and consumers run on separate hosts or threads.

[ OpenWire ]
```
/
 * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  https://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 *
 /
import org.apache.activemq.ActiveMQConnectionFactory;
import org.apache.activemq.jms.pool.PooledConnectionFactory;
import javax.jms.*;
public class AmazonMQExample {
// Specify the connection parameters.
private final static String WIRE_LEVEL_ENDPOINT 
        = "ssl://b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9-1.mq.us-east-2.amazonaws.com:61617";
private final static String ACTIVE_MQ_USERNAME = "MyUsername123";
private final static String ACTIVE_MQ_PASSWORD = "MyPassword456";

public static void main(String[] args) throws JMSException {
    final ActiveMQConnectionFactory connectionFactory =
            createActiveMQConnectionFactory();
    final PooledConnectionFactory pooledConnectionFactory =
            createPooledConnectionFactory(connectionFactory);

    sendMessage(pooledConnectionFactory);
    receiveMessage(connectionFactory);

    pooledConnectionFactory.stop();
}

private static void
sendMessage(PooledConnectionFactory pooledConnectionFactory) throws JMSException {
    // Establish a connection for the producer.
    final Connection producerConnection = pooledConnectionFactory
            .createConnection();
    producerConnection.start();

    // Create a session.
    final Session producerSession = producerConnection
            .createSession(false, Session.AUTO_ACKNOWLEDGE);

    // Create a queue named "MyQueue".
    final Destination producerDestination = producerSession
            .createQueue("MyQueue");

    // Create a producer from the session to the queue.
    final MessageProducer producer = producerSession
            .createProducer(producerDestination);
    producer.setDeliveryMode(DeliveryMode.NON_PERSISTENT);

    // Create a message.
    final String text = "Hello from Amazon MQ!";
    final TextMessage producerMessage = producerSession
            .createTextMessage(text);

    // Send the message.
    producer.send(producerMessage);
    System.out.println("Message sent.");

    // Clean up the producer.
    producer.close();
    producerSession.close();
    producerConnection.close();
}

private static void
receiveMessage(ActiveMQConnectionFactory connectionFactory) throws JMSException {
    // Establish a connection for the consumer.
    // Note: Consumers should not use PooledConnectionFactory.
    final Connection consumerConnection = connectionFactory.createConnection();
    consumerConnection.start();

    // Create a session.
    final Session consumerSession = consumerConnection
            .createSession(false, Session.AUTO_ACKNOWLEDGE);

    // Create a queue named "MyQueue".
    final Destination consumerDestination = consumerSession
            .createQueue("MyQueue");

    // Create a message consumer from the session to the queue.
    final MessageConsumer consumer = consumerSession
            .createConsumer(consumerDestination);

    // Begin to wait for messages.
    final Message consumerMessage = consumer.receive(1000);

    // Receive the message when it arrives.
    final TextMessage consumerTextMessage = (TextMessage) consumerMessage;
    System.out.println("Message received: "  consumerTextMessage.getText());

    // Clean up the consumer.
    consumer.close();
    consumerSession.close();
    consumerConnection.close();
}

private static PooledConnectionFactory
createPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) {
    // Create a pooled connection factory.
    final PooledConnectionFactory pooledConnectionFactory =
            new PooledConnectionFactory();
    pooledConnectionFactory.setConnectionFactory(connectionFactory);
    pooledConnectionFactory.setMaxConnections(10);
    return pooledConnectionFactory;
}

private static ActiveMQConnectionFactory createActiveMQConnectionFactory() {
    // Create a connection factory.
    final ActiveMQConnectionFactory connectionFactory =
            new ActiveMQConnectionFactory(WIRE_LEVEL_ENDPOINT);

    // Pass the username and password.
    connectionFactory.setUserName(ACTIVE_MQ_USERNAME);
    connectionFactory.setPassword(ACTIVE_MQ_PASSWORD);
    return connectionFactory;
}

}
```

[ MQTT ]
```
/
 * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  https://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 *
 /
import org.eclipse.paho.client.mqttv3.*;
public class AmazonMQExampleMqtt implements MqttCallback {
// Specify the connection parameters.
private final static String WIRE_LEVEL_ENDPOINT =
        "ssl://b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9-1.mq.us-east-2.amazonaws.com:8883";
private final static String ACTIVE_MQ_USERNAME = "MyUsername123";
private final static String ACTIVE_MQ_PASSWORD = "MyPassword456";

public static void main(String[] args) throws Exception {
    new AmazonMQExampleMqtt().run();
}

private void run() throws MqttException, InterruptedException {

    // Specify the topic name and the message text.
    final String topic = "myTopic";
    final String text = "Hello from Amazon MQ!";

    // Create the MQTT client and specify the connection options.
    final String clientId = "abc123";
    final MqttClient client = new MqttClient(WIRE_LEVEL_ENDPOINT, clientId);
    final MqttConnectOptions connOpts = new MqttConnectOptions();

    // Pass the username and password.
    connOpts.setUserName(ACTIVE_MQ_USERNAME);
    connOpts.setPassword(ACTIVE_MQ_PASSWORD.toCharArray());

    // Create a session and subscribe to a topic filter.
    client.connect(connOpts);
    client.setCallback(this);
    client.subscribe("");

    // Create a message.
    final MqttMessage message = new MqttMessage(text.getBytes());

    // Publish the message to a topic.
    client.publish(topic, message);
    System.out.println("Published message.");

    // Wait for the message to be received.
    Thread.sleep(3000L);

    // Clean up the connection.
    client.disconnect();
}

@Override
public void connectionLost(Throwable cause) {
    System.out.println("Lost connection.");
}

@Override
public void messageArrived(String topic, MqttMessage message) throws MqttException {
    System.out.println("Received message from topic "  topic  ": "  message);
}

@Override
public void deliveryComplete(IMqttDeliveryToken token) {
    System.out.println("Delivered message.");
}

}
```

[ STOMPWSS ]
```
/
 * Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  https://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 *
 /
import org.springframework.messaging.converter.StringMessageConverter;
import org.springframework.messaging.simp.stomp.*;
import org.springframework.web.socket.WebSocketHttpHeaders;
import org.springframework.web.socket.client.WebSocketClient;
import org.springframework.web.socket.client.standard.StandardWebSocketClient;
import org.springframework.web.socket.messaging.WebSocketStompClient;
import java.lang.reflect.Type;
public class AmazonMQExampleStompWss {
// Specify the connection parameters.
private final static String DESTINATION = "/queue";
private final static String WIRE_LEVEL_ENDPOINT =
        "wss://b-1234a5b6-78cd-901e-2fgh-3i45j6k178l9-1.mq.us-east-2.amazonaws.com:61619";
private final static String ACTIVE_MQ_USERNAME = "MyUsername123";
private final static String ACTIVE_MQ_PASSWORD = "MyPassword456";

public static void main(String[] args) throws Exception {
    final AmazonMQExampleStompWss example = new AmazonMQExampleStompWss();

    final StompSession stompSession = example.connect();
    System.out.println("Subscribed to a destination using session.");
    example.subscribeToDestination(stompSession);

    System.out.println("Sent message to session.");
    example.sendMessage(stompSession);
    Thread.sleep(60000);
}

private StompSession connect() throws Exception {
    // Create a client.
    final WebSocketClient client = new StandardWebSocketClient();
    final WebSocketStompClient stompClient = new WebSocketStompClient(client);
    stompClient.setMessageConverter(new StringMessageConverter());

    final WebSocketHttpHeaders headers = new WebSocketHttpHeaders();

    // Create headers with authentication parameters.
    final StompHeaders head = new StompHeaders();
    head.add(StompHeaders.LOGIN, ACTIVE_MQ_USERNAME);
    head.add(StompHeaders.PASSCODE, ACTIVE_MQ_PASSWORD);

    final StompSessionHandler sessionHandler = new MySessionHandler();

    // Create a connection.
    return stompClient.connect(WIRE_LEVEL_ENDPOINT, headers, head,
            sessionHandler).get();
}

private void subscribeToDestination(final StompSession stompSession) {
    stompSession.subscribe(DESTINATION, new MyFrameHandler());
}

private void sendMessage(final StompSession stompSession) {
    stompSession.send(DESTINATION, "Hello from Amazon MQ!".getBytes());
}

private static class MySessionHandler extends StompSessionHandlerAdapter {
    public void afterConnected(final StompSession stompSession,
                               final StompHeaders stompHeaders) {
        System.out.println("Connected to broker.");
    }
}

private static class MyFrameHandler implements StompFrameHandler {
    public Type getPayloadType(final StompHeaders headers) {
        return String.class;
    }

    public void handleFrame(final StompHeaders stompHeaders,
                            final Object message) {
        System.out.print("Received message from topic: "  message);
    }
}

}
```
