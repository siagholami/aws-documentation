How AWS App Mesh works with IAM
Before you use IAM to manage access to App Mesh, you should understand what IAM features are available to use with App Mesh. To get a high-level view of how App Mesh and other AWS services work with IAM, see AWS Services That Work with IAM in the IAM User Guide.
Topics
 App Mesh identity-based policies
 App Mesh resource-based policies
 Authorization based on App Mesh tags
 App Mesh IAM roles
App Mesh identity-based policies
With IAM identity-based policies, you can specify allowed or denied actions and resources as well as the conditions under which actions are allowed or denied. App Mesh supports specific actions, resources, and condition keys. To learn about all of the elements that you use in a JSON policy, see IAM JSON Policy Elements Reference in the IAM User Guide.
Actions
The Action element of an IAM identity-based policy describes the specific action or actions that will be allowed or denied by the policy. Policy actions usually have the same name as the associated AWS API operation. The action is used in a policy to grant permissions to perform the associated operation. 
Policy actions in App Mesh use the following prefix before the action: appmesh:. For example, to grant someone permission to list meshes in an account with the appmesh:ListMeshes API operation, you include the appmesh:ListMeshes action in their policy. Policy statements must include either an Action or NotAction element.
To specify multiple actions in a single statement, separate them with commas as follows.
"Action": [
      "appmesh:ListMeshes",
      "appmesh:ListVirtualNodes"
]
You can specify multiple actions using wildcards (*). For example, to specify all actions that begin with the word Describe, include the following action.
"Action": "appmesh:Describe*"
To see a list of App Mesh actions, see Actions Defined by AWS App Mesh in the IAM User Guide.
Resources
The Resource element specifies the object or objects to which the action applies. Statements must include either a Resource or a NotResource element. You specify a resource using an ARN or using the wildcard (*) to indicate that the statement applies to all resources.
The App Mesh mesh resource has the following ARN.
arn:${Partition}:appmesh:${Region}:${Account}:mesh/${MeshName}
For more information about the format of ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
For example, to specify the mesh named apps in the region-code Region in your statement, use the following ARN.
arn:aws:appmesh:region-code:111122223333:mesh/apps
To specify all instances that belong to a specific account, use the wildcard (*).
"Resource": "arn:aws:appmesh:region-code:111122223333:mesh/*"
Some App Mesh actions, such as those for creating resources, cannot be performed on a specific resource. In those cases, you must use the wildcard (*).
"Resource": "*"
Many App Mesh API actions involve multiple resources. For example, CreateRoute creates a route with a virtual node target, so an IAM user must have permissions to use the route and the virtual node. To specify multiple resources in a single statement, separate the ARNs with commas. 
"Resource": [
      "arn:aws:appmesh:region-code:111122223333:mesh/apps/virtualRouter/serviceB/route/*",
      "arn:aws:appmesh:region-code:111122223333:mesh/apps/virtualNode/serviceB"
]
To see a list of App Mesh resource types and their ARNs, see Resources Defined by AWS App Mesh in the IAM User Guide. To learn with which actions you can specify the ARN of each resource, see Actions Defined by AWS App Mesh.
Condition keys
App Mesh supports using some global condition keys. To see all AWS global condition keys, see AWS Global Condition Context Keys in the IAM User Guide. To see a list of the global condition keys that App Mesh supports, see Condition Keys for AWS App Mesh in the IAM User Guide. To learn with which actions and resources you can use with a condition key, see Actions Defined by AWS App Mesh.
Examples
To view examples of App Mesh identity-based policies, see AWS App Mesh identity-based policy examples.
App Mesh resource-based policies
App Mesh does not support resource-based policies.
Authorization based on App Mesh tags
You can attach tags to App Mesh resources or pass tags in a request to App Mesh. To control access based on tags, you provide tag information in the condition element of a policy using the appmesh:ResourceTag/key-name, aws:RequestTag/key-name, or aws:TagKeys condition keys. For more information about tagging App Mesh resources, see Tagging AWS Resources.
To view an example identity-based policy for limiting access to a resource based on the tags on that resource, see Creating App Mesh meshes with restricted tags.
App Mesh IAM roles
An IAM role is an entity within your AWS account that has specific permissions.
Using temporary credentials with App Mesh
You can use temporary credentials to sign in with federation, assume an IAM role, or to assume a cross-account role. You obtain temporary security credentials by calling AWS STS API operations such as AssumeRole or GetFederationToken. 
App Mesh supports using temporary credentials. 
Service-linked roles
Service-linked roles allow AWS services to access resources in other services to complete an action on your behalf. Service-linked roles appear in your IAM account and are owned by the service. An IAM administrator can view but not edit the permissions for service-linked roles.
App Mesh supports service-linked roles. For details about creating or managing App Mesh service-linked roles, see Using Service-Linked Roles for App Mesh.
Service roles
This feature allows a service to assume a service role on your behalf. This role allows the service to access resources in other services to complete an action on your behalf. Service roles appear in your IAM account and are owned by the account. This means that an IAM administrator can change the permissions for this role. However, doing so might break the functionality of the service.
App Mesh does not support service roles.