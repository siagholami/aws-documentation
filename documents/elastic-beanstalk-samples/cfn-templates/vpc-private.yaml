###################################################################################################
#### Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
####
#### Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file
#### except in compliance with the License. A copy of the License is located at
####
####     http://aws.amazon.com/apache2.0/
####
#### or in the "license" file accompanying this file. This file is distributed on an "AS IS"
#### BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#### License for the specific language governing permissions and limitations under the License.
###################################################################################################

###################################################################################################
#### By default, Elastic Beanstalk creates all of your application's compute and networking
#### resources in the default VPC. Use this template to create a custom VPC to isolate your
#### environment's resources in a private subnet with customizable security.
####
#### The template creates a VPC with no public subnets. It's suitable for use when your application
#### doesn't need public internet access. It's particularly useful when combined with interface VPC
#### endpoints.
#### For details, see https://docs.aws.amazon.com/elasticbeanstalk/latest/dg/vpc-vpce.html .
####
#### This template creates the following resources-
####   - A VPC with the IP range 172.31.0.0/16
####   - 2 private subnets for the EC2 instances that run your application
####   - 2 public subnets for the load balancer that routes traffic to the instances
####   - An Internet gateway, NAT gateway, and route table to allow the instances
####     to communicate with the load balancer and the Internet.
####
###################################################################################################

Resources:
  PrivateVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 172.31.0.0/16
      Tags:
        - Key: Name
          Value: !Join 
            - _
            - - !Ref 'AWS::StackName'
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PrivateVPC
      Tags:
      - Key: Name
        Value: Private Subnets
      - Key: Network
        Value: Private            
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateVPC
      AvailabilityZone:
        'Fn::Select':
          - 0
          - 'Fn::GetAZs': ''
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join 
            - _
            - - !Ref 'AWS::StackName'
              - Private
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref PrivateVPC
      AvailabilityZone:
        'Fn::Select':
          - 1
          - 'Fn::GetAZs': ''
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join 
            - _
            - - !Ref 'AWS::StackName'
              - Private
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable              
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable          
Outputs:
  PrivateVPCID:
    Description: VPC ID
    Value: !Ref PrivateVPC
    Export:
      Name: BeanstalkVPCID
  PrivateSubnet1ID:
    Description: Private Subnet A ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: BeanstalkPrivateSubnet1ID
  PrivateSubnet2ID:
    Description: Private Subnet B ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: BeanstalkPrivateSubnet2ID
