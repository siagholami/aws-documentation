Using Dynamic Content Manager
You can use the Dynamic Content Cloud Gem and its Dynamic Content Manager to manage dynamic content updates for your game through AWS. You can use Dynamic Content Manager to create manifests and packages, add files to the packages, and upload the manifest and packages to the AWS Cloud. This ensures that your clients have the latest content for your game.
Topics
 Managing Dynamic Content Packages
 Using lmbr_aws for Dynamic Content
 Testing the Dynamic Content System
 Dynamic Content Engineering Details
Prerequisites
This tutorial assumes the following:
 You are using a Lumberyard project that has the Dynamic Cloud Gem enabled (in the Project Configurator, choose Cloud Gem Dynamic Content).
 You have created a project stack and deployment stack in Cloud Canvas Resource Manager with the CloudGemDynamicContent resource group.
Note
If you do not have a deployment with the CloudGemDynamicContent resource group, the Dynamic Content Manager interface is disabled.
To use the Dynamic Content Manager to upload dynamic content


In Lumberyard Editor, choose AWS, Cloud Canvas, Dynamic Content Manager.



In Dynamic Content Manager, click Create a new manifest.



A manifest is a file that keeps track of the dynamic content files that you deliver to customers. A manifest records the following information:
    The content files that have changed locally
    The files that are included in any file packages
    Differences between the local packages and the packages in the cloud that are staged for delivery to customers
    The target operating systems and devices for this manifest
You can create as many manifests as you require. For example, you can create specialized manifests for different types of assets.


Choose a name for the manifest. The name should reflect the purpose of the manifest.


Select the target operating systems and devices that you prefer to work on for this manifest. 


When you create a manifest, the manifest is empty and has no files or packages.



Click Add Files or Add Folder and choose one of the target operating systems.


In the file browser, choose the files that you want to add to the manifest.


Because the original assets might not be in a form that your game can consume, the file browser opens to the location of your game projects asset cache. For example, your game OS might require textures to be in .dds format, but the original asset for a texture might be a .png file. The Asset Processor converts the files to the appropriate format and stores them in the asset cache, so the asset cache is your safest choice. However, if you have processed assets elsewhere in your file system, you are free to include them.
File Warnings
If the files that you selected are not supported by the current manifest or not supported by the OS that you selected, you are warned accordingly.

If the files that you selected are not in your game projects asset cache (and have therefore not been processed by the Asset Processor), you are notified of the error.


The left pane of Dynamic Content Manager shows the files that you added to the manifest. You can add files for different target operating systems and sort the files by their name, OS, or status. After you have some files in the file manager, you can select one or more files and remove them. You can remove the files by right-clicking them or by clicking Remove Files.


Now you are ready to add a package to the manifest.
Click New Package.


Enter a name for the package and choose the operating system or device type for it.



The new package appears in the right pane of Dynamic Content Manager. You can sort the packages by column.



Each package is stored in a .pak file, which is the archived file format that Lumberyard uses for its released game assets. You can have one or more packages per manifest, and you can assign the same file to multiple packages. This is useful when you have common files and operating system or device-specific files that you need to deliver in one package. It is also useful if you want to create bundles of items that might share assets.

To add files to the package that you created, drag the files from the manifest on the left to the package on the right. You can drag multiple files into the same .pak file.


You can drag operating system or device-specific files to a package with that OS type only. If you drag multiple files to a package and the OS type of these files does not match that of the package, Lumberyard warns you about the incompatible files.

The icons that appear in the Packages pane are described as follows.  

[See the AWS documentation website for more details]
Notes
    You can remove individual files from a package, but to help prevent inadvertent removal, this action is limited to one file at a time.
    You can also use Dynamic Content Manager to delete packages, but deleting a package does not delete the staged packages in the cloud. To delete staged packages in the cloud, you must use the web-based Cloud Gem Portal that manages the service side of a cloud gem.


You can change the target operating systems or devices for the current manifest at any time.


Click the settings button and choose Change Target Platforms.



Choose the operating systems or devices that you want. If none are selected, all supported operating systems and devices are added.

After you update the target operating systems and devices, Dynamic Content Manager lists only the files and packages for the ones that you selected. You can add files and folders only for the selected target OS or device.



When you are ready, click Upload Packages.


(Optional) To sign your packages, select Sign packages with security key.



If you haven't yet generated key pairs, click Next to generate a new key pair, and then click Continue.



You can also use the file menu to generate a new key pair at any time.


After the new key pair is generated, click Upload. This action both creates the package files locally and uploads them to your private staging bucket in the AWS Cloud.


The status bar of the main window shows upload process messages.

An animation in the S3 Status column indicates the package that is being uploaded.

The packages appear in the Dynamic Content section of the Cloud Gem Portal. By default, Lumberyard marks them as Private. When you are ready, you can move the packages to the Public stage to make them available for download by game clients. For more information on this step, see Managing Dynamic Content Packages.