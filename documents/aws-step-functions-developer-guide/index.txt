AWS Step Functions Developer Guide

*Copyright Â© 2019 Amazon Web Services, Inc. and/or its affiliates. All rights reserved.***

Amazon's trademarks and trade dress may not be used in 
     connection with any product or service that is not Amazon's, 
     in any manner that is likely to cause confusion among customers, 
     or in any manner that disparages or discredits Amazon. All other 
     trademarks not owned by Amazon are the property of their respective
     owners, who may or may not be affiliated with, connected to, or 
     sponsored by Amazon.

Contents

What Is AWS Step Functions?
Setting Up Step Functions
Prerequisites For Setting Up Step Functions
Setting Up Step Functions Local (Downloadable Version)
Step Functions (Downloadable Version) on Your Computer
Step Functions (Downloadable Version) and Docker
Step Functions Local Configuration Options
Step Functions and AWS SAM CLI Local


Getting Started
Tutorials
Development Options
Creating a Lambda State Machine
Creating a Lambda State Machine Using AWS CloudFormation
Creating an Activity State Machine
Handling Error Conditions Using a State Machine
Periodically Start a State Machine Execution Using CloudWatch Events
Starting a State Machine Execution in Response to Amazon S3 Events
Creating a Step Functions API Using API Gateway
Iterating a Loop Using Lambda
Continue as a New Execution
Using Code Snippets to Create a State to Send an Amazon SNS message
Deploy an Example Human Approval Project
Use a Map State to Call Lambda Multiple Times
How Step Functions Works
States
Amazon States Language
State Machine Structure
Common State Fields


Pass
Task
Activities
Example Activity Worker in Ruby




Choice
Wait
Succeed
Fail
Parallel
Map


Transitions
State Machine Data
Input and Output Processing in Step Functions
Paths
InputPath and Parameters
ItemsPath
ResultPath
OutputPath
InputPath, ResultPath and OutputPath Example
The Context Object


Executions
Start Workflow Executions From a Task State


Error Handling
AWS Service Integrations
Service Integration Patterns
Pass Parameters to a Service API
Code Snippets
Supported AWS Service Integrations for Step Functions
Invoke Lambda with Step Functions
Manage AWS Batch with Step Functions
Call DynamoDB APIs with Step Functions
Manage Amazon ECS or Fargate Tasks with Step Functions
Call Amazon SNS with Step Functions
Call Amazon SQS with Step Functions
Manage AWS Glue Jobs with Step Functions
Manage Amazon SageMaker Training Jobs with Step Functions
Manage AWS Step Functions Executions as an Integrated Service




Read Consistency
Templates
Tagging
Sample Projects
Manage a Batch Job (AWS Batch, Amazon SNS)
Manage a Container Task (Amazon ECS, Amazon SNS)
Transfer Data Records (Lambda, DynamoDB, Amazon SQS)
Poll for Job Status (Lambda, AWS Batch)
Task Timer
Callback Pattern Example
Start a Workflow Within a Workflow (AWS Step Functions, AWS Lambda)
Dynamically Process Data with a Map State
Best Practices for Step Functions
Use Timeouts to Avoid Stuck Executions
Use ARNs Instead of Passing Large Payloads
Avoid Reaching the History Limit
Handle Lambda Service Exceptions
Avoid Latency When Polling for Activity Tasks
Limits
Monitoring and Logging
Monitoring Step Functions Using CloudWatch
Viewing Metrics for Step Functions
Setting Alarms for Step Functions


CloudWatch Events For Step Functions Execution Status Changes
Logging Step Functions Using AWS CloudTrail
Security
Tag-based Policies
Creating IAM Roles for AWS Step Functions
Creating Granular IAM Permissions for Non-Admin Users
IAM Policies for Integrated Services
IAM Policy for AWS Lambda
AWS Batch
Amazon DynamoDB
Amazon Elastic Container Service/AWS Fargate
Amazon Simple Notification Service
Amazon Simple Queue Service
AWS Glue
Amazon SageMaker
AWS Step Functions
Activities or no Tasks


Related Information
Document History
AWS Glossary
