.. Copyright 2010-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.

   This work is licensed under a Creative Commons Attribution-NonCommercial-ShareAlike 4.0
   International License (the "License"). You may not use this file except in compliance with the
   License. A copy of the License is located at http://creativecommons.org/licenses/by-nc-sa/4.0/.

   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
   either express or implied. See the License for the specific language governing permissions and
   limitations under the License.

######################################
Using Temporary Credentials from |STS|
######################################

.. meta::
   :description: How to configure temporary access for AWS services using the AWS SDK for PHP.
   :keywords:


.. _temporary_credentials:

:STS-api:`AWS Security Token Service <Welcome>`
(|STS|) enables you to request limited privilege, **temporary credentials**
for AWS |IAM| users, or for users that you authenticate via identity federation.

One common use case for temporary credentials is to grant mobile or
client-side applications access to AWS resources by authenticating users
through third-party identity providers (see :IAM-ug:`Web Identity Federation
<id_roles_providers_oidc>`).

.. note::

    Temporary credentials generated by |STS| are not supported by every
    service. To determine whether the service you are using supports temporary
    credentials, see :iam-ug:`IAM Temporary Security Credentials <id_credentials_temp>`.


Getting Temporary Credentials
=============================

|STS| has several operations that return temporary credentials, but the
``GetSessionToken`` operation is the simplest to demonstrate.
Assuming you have an instance of ``Aws\Sts\StsClient`` stored in the
``$stsClient`` variable, you call it as follows.

.. code-block:: php

    $result = $stsClient->getSessionToken();

The result for ``GetSessionToken`` and the other |STS| operations always
contains a ``'Credentials'`` value. If you print the result
(e.g., ``print_r($result)``), it looks like the following.

::

    Array
    (
        ...
        [Credentials] => Array
        (
            [SessionToken] => '<base64 encoded session token value>'
            [SecretAccessKey] => '<temporary secret access key value>'
            [Expiration] => 2013-11-01T01:57:52Z
            [AccessKeyId] => '<temporary access key value>'
        )
        ...
    )

Providing Temporary Credentials to the |sdk-php|
================================================

You can use temporary credentials with another AWS client by instantiating
the client and passing in the values received from |STS| directly.

.. code-block:: php

    use Aws\S3\S3Client;

    $result = $stsClient->getSessionToken();

    $s3Client = new S3Client([
        'version'     => '2006-03-01',
        'region'      => 'us-west-2',
        'credentials' => [
            'key'    => $result['Credentials']['AccessKeyId'],
            'secret' => $result['Credentials']['SecretAccessKey'],
            'token'  => $result['Credentials']['SessionToken']
        ]
    ]);

You can also construct an ``Aws\Credentials\Credentials`` object and use that
when instantiating the client.

.. code-block:: php

    use Aws\Credentials\Credentials;
    use Aws\S3\S3Client;

    $result = $stsClient->getSessionToken();

    $credentials = new Credentials(
        $result['Credentials']['AccessKeyId'],
        $result['Credentials']['SecretAccessKey'],
        $result['Credentials']['SessionToken']
    );

    $s3Client = new S3Client([
        'version'     => '2006-03-01',
        'region'      => 'us-west-2',
        'credentials' => $credentials
    ]);

However, the *best* way to provide temporary credentials is to use the
``createCredentials()`` helper method included with the ``StsClient``. This
method extracts the data from an |STS| result and creates the ``Credentials``
object for you.

.. code-block:: php

    $result = $stsClient->getSessionToken();
    $credentials = $stsClient->createCredentials($result);

    $s3Client = new S3Client([
        'version'     => '2006-03-01',
        'region'      => 'us-west-2',
        'credentials' => $credentials
    ]);

For more information about why you might need to use temporary credentials in
your application or project, see :iam-ug:`Scenarios for Granting Temporary Access <id_credentials_temp>` in the |STS| documentation.
