AWSTemplateFormatVersion: 2010-09-09
Description: An AWS Lambda application that uses Amazon Kinesis and Amazon RDS.
Transform: AWS::Serverless-2016-10-31
Parameters:
  vpcStackName:
    Default: list-manager-vpc
    Description: VPC and database stack name
    Type: String
Globals:
  Function:
    Runtime: nodejs12.x
    Tracing: Active
    Handler: index.handler
    AutoPublishAlias: live
    Environment:
        Variables:
          table: !Ref table
          aggtable: !Ref aggtable
          databaseHost:
            Fn::ImportValue:
              !Sub "${vpcStackName}-db-host"
          databaseName:
            Fn::ImportValue:
              !Sub "${vpcStackName}-db-name"
          databaseUser:
            Fn::ImportValue:
              !Sub "${vpcStackName}-db-user"
          databasePassword: '{{resolve:secretsmanager:list-manager:SecretString:password}}'
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue:
              !Sub "${vpcStackName}-vpc-sg"
      SubnetIds:
        - Fn::ImportValue:
              !Sub "${vpcStackName}-subnet-a"
        - Fn::ImportValue:
              !Sub "${vpcStackName}-subnet-b"
    DeploymentPreference:
      Type: AllAtOnce
      Role: !GetAtt deployrole.Arn
    Layers:
      - !Ref libs
Resources:
  deployrole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRoleForLambda
  libs:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: list-manager-lib
      Description: Dependencies for the list manager sample app.
      ContentUri: lib/.
      CompatibleRuntimes:
        - nodejs12.x
  dbadmin:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dbadmin/.
      Description: Run SQL queries.
      MemorySize: 128
      Timeout: 15
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaVPCAccessExecutionRole
  processor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: processor/.
      Description: Process events from Amazon Kinesis
      MemorySize: 128
      Timeout: 100
      # Function's execution role
      Policies:
        - AWSLambdaBasicExecutionRole
        - AWSLambdaKinesisExecutionRole
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        kinesis:
          Type: Kinesis
          Properties:
            Stream: !GetAtt stream.Arn
            BatchSize: 100
            StartingPosition: LATEST
  stream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
  table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "aggid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "aggid"
          KeyType: "HASH"
        - AttributeName: "id"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "2"
        WriteCapacityUnits: "2"
  aggtable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
