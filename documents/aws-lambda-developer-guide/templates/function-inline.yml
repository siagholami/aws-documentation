AWSTemplateFormatVersion: '2010-09-09'
Description: An AWS Lambda application that uses the AWS Lambda API.
Resources:
  function:
    Type: AWS::Lambda::Function
    Properties: 
      Code: 
        ZipFile: |
          const AWS = require('aws-sdk')
          // Read environment variable
          let region = process.env.AWS_REGION
          if (process.env.region)
            region = process.env.region
          // Create client outside of handler to reuse
          const lambda = new AWS.Lambda({region: region})

          // Handler
          exports.handler = function(event, context) {
            console.log('Region: ' + region)
            console.log('Event: ' + JSON.stringify(event, null, 2))
            return getAccountSettings()
          }

          // Use SDK client
          var getAccountSettings = function(){
            return lambda.getAccountSettings().promise()
          }
      Description: Blank application function
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt executionRole.Arn
      Runtime: nodejs12.x
      Timeout: 10
      TracingConfig:
        Mode: Active
  scheduledEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: Scheduled event
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets:
        - Arn: !GetAtt function.Arn
          Id: Function
  invokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref function
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt scheduledEvent.Arn
  executionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: read-lambdasettings
          PolicyDocument:
            Version: 2012-10-17
            Statement:
            - Effect: Allow
              Action: lambda:GetAccountSettings
              Resource: '*'
      AssumeRolePolicyDocument: |
        {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Action": [
                "sts:AssumeRole"
              ],
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              }
            }
          ]
        }
