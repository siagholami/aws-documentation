Enabling cross-origin resource sharing (CORS) using the AWS SDK for .NET
To manage cross-origin resource sharing (CORS) for a bucket, you can use the AWS SDK for .NET. For more information about CORS, see Cross-origin resource sharing (CORS).
Example
The following C# code:
 Creates a CORS configuration and sets the configuration on a bucket
 Retrieves the configuration and modifies it by adding a rule
 Adds the modified configuration to the bucket
 Deletes the configuration
For information about creating and testing a working sample, see Running the Amazon S3 .NET Code Examples.   
```
using Amazon;
using Amazon.S3;
using Amazon.S3.Model;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
namespace Amazon.DocSamples.S3
{
    class CORSTest
    {
        private const string bucketName = " bucket name ";
        // Specify your bucket region (an example region is shown).
        private static readonly RegionEndpoint bucketRegion = RegionEndpoint.USWest2; 
        private static IAmazonS3 s3Client;
    public static void Main()
    {
        s3Client = new AmazonS3Client(bucketRegion);
        CORSConfigTestAsync().Wait();
    }
    private static async Task CORSConfigTestAsync()
    {
        try
        {
            // Create a new configuration request and add two rules    
            CORSConfiguration configuration = new CORSConfiguration
            {
                Rules = new System.Collections.Generic.List<CORSRule>
                    {
                      new CORSRule
                      {
                        Id = "CORSRule1",
                        AllowedMethods = new List<string> {"PUT", "POST", "DELETE"},
                        AllowedOrigins = new List<string> {"http://*.example.com"}
                      },
                      new CORSRule
                      {
                        Id = "CORSRule2",
                        AllowedMethods = new List<string> {"GET"},
                        AllowedOrigins = new List<string> {"*"},
                        MaxAgeSeconds = 3000,
                        ExposeHeaders = new List<string> {"x-amz-server-side-encryption"}
                      }
                    }
            };

            // Add the configuration to the bucket. 
            await PutCORSConfigurationAsync(configuration);

            // Retrieve an existing configuration. 
            configuration = await RetrieveCORSConfigurationAsync();

            // Add a new rule.
            configuration.Rules.Add(new CORSRule
            {
                Id = "CORSRule3",
                AllowedMethods = new List<string> { "HEAD" },
                AllowedOrigins = new List<string> { "http://www.example.com" }
            });

            // Add the configuration to the bucket. 
            await PutCORSConfigurationAsync(configuration);

            // Verify that there are now three rules.
            configuration = await RetrieveCORSConfigurationAsync();
            Console.WriteLine();
            Console.WriteLine("Expected # of rulest=3; found:{0}", configuration.Rules.Count);
            Console.WriteLine();
            Console.WriteLine("Pause before configuration delete. To continue, click Enter...");
            Console.ReadKey();

            // Delete the configuration.
            await DeleteCORSConfigurationAsync();

            // Retrieve a nonexistent configuration.
            configuration = await RetrieveCORSConfigurationAsync();
        }
        catch (AmazonS3Exception e)
        {
            Console.WriteLine("Error encountered on server. Message:'{0}' when writing an object", e.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine("Unknown encountered on server. Message:'{0}' when writing an object", e.Message);
        }
    }

    static async Task PutCORSConfigurationAsync(CORSConfiguration configuration)
    {

        PutCORSConfigurationRequest request = new PutCORSConfigurationRequest
        {
            BucketName = bucketName,
            Configuration = configuration
        };

        var response = await s3Client.PutCORSConfigurationAsync(request);
    }

    static async Task<CORSConfiguration> RetrieveCORSConfigurationAsync()
    {
        GetCORSConfigurationRequest request = new GetCORSConfigurationRequest
        {
            BucketName = bucketName

        };
        var response = await s3Client.GetCORSConfigurationAsync(request);
        var configuration = response.Configuration;
        PrintCORSRules(configuration);
        return configuration;
    }

    static async Task DeleteCORSConfigurationAsync()
    {
        DeleteCORSConfigurationRequest request = new DeleteCORSConfigurationRequest
        {
            BucketName = bucketName
        };
        await s3Client.DeleteCORSConfigurationAsync(request);
    }

    static void PrintCORSRules(CORSConfiguration configuration)
    {
        Console.WriteLine();

        if (configuration == null)
        {
            Console.WriteLine("\nConfiguration is null");
            return;
        }

        Console.WriteLine("Configuration has {0} rules:", configuration.Rules.Count);
        foreach (CORSRule rule in configuration.Rules)
        {
            Console.WriteLine("Rule ID: {0}", rule.Id);
            Console.WriteLine("MaxAgeSeconds: {0}", rule.MaxAgeSeconds);
            Console.WriteLine("AllowedMethod: {0}", string.Join(", ", rule.AllowedMethods.ToArray()));
            Console.WriteLine("AllowedOrigins: {0}", string.Join(", ", rule.AllowedOrigins.ToArray()));
            Console.WriteLine("AllowedHeaders: {0}", string.Join(", ", rule.AllowedHeaders.ToArray()));
            Console.WriteLine("ExposeHeader: {0}", string.Join(", ", rule.ExposeHeaders.ToArray()));
        }
    }
}

}
```