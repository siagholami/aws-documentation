
Take the survey!
Help us improve the AWS SDK for .NET and its documentation by sharing your experience. Click here to take a quick survey.

Creating Amazon SQS queues
This example shows you how to use the AWS SDK for .NET to create an Amazon SQS queue. The application creates a dead-letter queue if you don't supply the ARN for one. It then creates a standard message queue, which includes a dead-letter queue (the one you supplied or the one that was created).
If you don't supply any command-line arguments, the application simply shows information about all existing queues.
The following sections provide snippets of this example. The complete code for the example is shown after that, and can be built and run as is.
Topics
 Show existing queues
 Create the queue
 Get a queue's ARN
 Complete code
Show existing queues
The following snippet shows a list of the existing queues in the SQS client's region and the attributes of each queue.
The example at the end of this topic shows this snippet in use.
```
    //
    // Method to show a list of the existing queues
    private static async Task ShowQueues(IAmazonSQS sqsClient)
    {
      ListQueuesResponse responseList = await sqsClient.ListQueuesAsync("");
      Console.WriteLine();
      foreach(string qUrl in responseList.QueueUrls)
      {
        // Get and show all attributes. Could also get a subset.
        await ShowAllAttributes(sqsClient, qUrl);
      }
    }
//
// Method to show all attributes of a queue
private static async Task ShowAllAttributes(IAmazonSQS sqsClient, string qUrl)
{
  var attributes = new List<string>{ QueueAttributeName.All };
  GetQueueAttributesResponse responseGetAtt =
    await sqsClient.GetQueueAttributesAsync(qUrl, attributes);
  Console.WriteLine($"Queue: {qUrl}");
  foreach(var att in responseGetAtt.Attributes)
    Console.WriteLine($"\t{att.Key}: {att.Value}");
}

```
Create the queue
The following snippet creates a queue. The snippet includes the use of a dead-letter queue, but a dead-letter queue isn't necessarily required for your queues.
The example at the end of this topic shows this snippet in use.
```
    //
    // Method to create a queue. Returns the queue URL.
    private static async Task CreateQueue(
      IAmazonSQS sqsClient, string qName, string deadLetterQueueUrl=null,
      string maxReceiveCount=null, string receiveWaitTime=null)
    {
      var attrs = new Dictionary();
  // If a dead-letter queue is given, create a message queue
  if(!string.IsNullOrEmpty(deadLetterQueueUrl))
  {
    attrs.Add(QueueAttributeName.ReceiveMessageWaitTimeSeconds, receiveWaitTime);
    attrs.Add(QueueAttributeName.RedrivePolicy,
      $"{{\"deadLetterTargetArn\":\"{await GetQueueArn(sqsClient, deadLetterQueueUrl)}\"," 
      $"\"maxReceiveCount\":\"{maxReceiveCount}\"}}");
    // Add other attributes for the message queue such as VisibilityTimeout
  }

  // If no dead-letter queue is given, create one of those instead
  //else
  //{
  //  // Add attributes for the dead-letter queue as needed
  //  attrs.Add();
  //}

  // Create the queue
  CreateQueueResponse responseCreate = await sqsClient.CreateQueueAsync(
      new CreateQueueRequest{QueueName = qName, Attributes = attrs});
  return responseCreate.QueueUrl;
}

```
Get a queue's ARN
The following snippet gets the ARN of the queue identified by the given queue URL.
The example at the end of this topic shows this snippet in use.
//
    // Method to get the ARN of a queue
    private static async Task<string> GetQueueArn(IAmazonSQS sqsClient, string qUrl)
    {
      GetQueueAttributesResponse responseGetAtt = await sqsClient.GetQueueAttributesAsync(
        qUrl, new List<string>{QueueAttributeName.QueueArn});
      return responseGetAtt.QueueARN;
    }
Complete code
This section shows relevant references and the complete code for this example.
SDK references
NuGet packages:
 AWSSDK.SQS
Programming elements:
 Namespace Amazon.SQS
Class AmazonSQSClient
Class QueueAttributeName
 Namespace Amazon.SQS.Model
Class CreateQueueRequest
Class CreateQueueResponse
Class GetQueueAttributesResponse
Class ListQueuesResponse
The code
```
using System;
using System.Threading.Tasks;
using System.Collections.Generic;
using Amazon.SQS;
using Amazon.SQS.Model;
namespace SQSCreateQueue
{
  // = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  // Class to create a queue
  class Program
  {
    private const string MaxReceiveCount = "10";
    private const string ReceiveMessageWaitTime = "2";
    private const int MaxArgs = 3;
static async Task Main(string[] args)
{
  // Parse the command line and show help if necessary
  var parsedArgs = CommandLine.Parse(args);
  if(parsedArgs.Count > MaxArgs)
    CommandLine.ErrorExit(
      "\nToo many command-line arguments.\nRun the command with no arguments to see help.");

  // Create the Amazon SQS client
  var sqsClient = new AmazonSQSClient();

  // In the case of no command-line arguments, just show help and the existing queues
  if(parsedArgs.Count == 0)
  {
    PrintHelp();
    Console.WriteLine("\nNo arguments specified.");
    Console.Write("Do you want to see a list of the existing queues? ((y) or n): ");
    string response = Console.ReadLine();
    if((string.IsNullOrEmpty(response)) || (response.ToLower() == "y"))
      await ShowQueues(sqsClient);
    return;
  }

  // Get the application parameters from the parsed arguments
  string queueName =
    CommandLine.GetParameter(parsedArgs, null, "-q", "--queue-name");
  string deadLetterQueueUrl =
    CommandLine.GetParameter(parsedArgs, null, "-d", "--dead-letter-queue");
  string maxReceiveCount =
    CommandLine.GetParameter(parsedArgs, MaxReceiveCount, "-m", "--max-receive-count");
  string receiveWaitTime =
    CommandLine.GetParameter(parsedArgs, ReceiveMessageWaitTime, "-w", "--wait-time");

  if(string.IsNullOrEmpty(queueName))
    CommandLine.ErrorExit(
      "\nYou must supply a queue name.\nRun the command with no arguments to see help.");

  // If a dead-letter queue wasn't given, create one
  if(string.IsNullOrEmpty(deadLetterQueueUrl))
  {
    Console.WriteLine("\nNo dead-letter queue was specified. Creating one...");
    deadLetterQueueUrl = await CreateQueue(sqsClient, queueName  "__dlq");
    Console.WriteLine($"Your new dead-letter queue:");
    await ShowAllAttributes(sqsClient, deadLetterQueueUrl);
  }

  // Create the message queue
  string messageQueueUrl = await CreateQueue(
    sqsClient, queueName, deadLetterQueueUrl, maxReceiveCount, receiveWaitTime);
  Console.WriteLine($"Your new message queue:");
  await ShowAllAttributes(sqsClient, messageQueueUrl);
}


//
// Method to show a list of the existing queues
private static async Task ShowQueues(IAmazonSQS sqsClient)
{
  ListQueuesResponse responseList = await sqsClient.ListQueuesAsync("");
  Console.WriteLine();
  foreach(string qUrl in responseList.QueueUrls)
  {
    // Get and show all attributes. Could also get a subset.
    await ShowAllAttributes(sqsClient, qUrl);
  }
}


//
// Method to create a queue. Returns the queue URL.
private static async Task<string> CreateQueue(
  IAmazonSQS sqsClient, string qName, string deadLetterQueueUrl=null,
  string maxReceiveCount=null, string receiveWaitTime=null)
{
  var attrs = new Dictionary<string, string>();

  // If a dead-letter queue is given, create a message queue
  if(!string.IsNullOrEmpty(deadLetterQueueUrl))
  {
    attrs.Add(QueueAttributeName.ReceiveMessageWaitTimeSeconds, receiveWaitTime);
    attrs.Add(QueueAttributeName.RedrivePolicy,
      $"{{\"deadLetterTargetArn\":\"{await GetQueueArn(sqsClient, deadLetterQueueUrl)}\"," 
      $"\"maxReceiveCount\":\"{maxReceiveCount}\"}}");
    // Add other attributes for the message queue such as VisibilityTimeout
  }

  // If no dead-letter queue is given, create one of those instead
  //else
  //{
  //  // Add attributes for the dead-letter queue as needed
  //  attrs.Add();
  //}

  // Create the queue
  CreateQueueResponse responseCreate = await sqsClient.CreateQueueAsync(
      new CreateQueueRequest{QueueName = qName, Attributes = attrs});
  return responseCreate.QueueUrl;
}


//
// Method to get the ARN of a queue
private static async Task<string> GetQueueArn(IAmazonSQS sqsClient, string qUrl)
{
  GetQueueAttributesResponse responseGetAtt = await sqsClient.GetQueueAttributesAsync(
    qUrl, new List<string>{QueueAttributeName.QueueArn});
  return responseGetAtt.QueueARN;
}


//
// Method to show all attributes of a queue
private static async Task ShowAllAttributes(IAmazonSQS sqsClient, string qUrl)
{
  var attributes = new List<string>{ QueueAttributeName.All };
  GetQueueAttributesResponse responseGetAtt =
    await sqsClient.GetQueueAttributesAsync(qUrl, attributes);
  Console.WriteLine($"Queue: {qUrl}");
  foreach(var att in responseGetAtt.Attributes)
    Console.WriteLine($"\t{att.Key}: {att.Value}");
}


//
// Command-line help
private static void PrintHelp()
{
  Console.WriteLine(
  "\nUsage: SQSCreateQueue -q <queue-name> [-d <dead-letter-queue>]" 
    " [-m <max-receive-count>] [-w <wait-time>]" 
  "\n  -q, --queue-name: The name of the queue you want to create." 
  "\n  -d, --dead-letter-queue: The URL of an existing queue to be used as the dead-letter queue."
  "\n      If this argument isn't supplied, a new dead-letter queue will be created." 
  "\n  -m, --max-receive-count: The value for maxReceiveCount in the RedrivePolicy of the queue." 
  $"\n      Default is {MaxReceiveCount}." 
  "\n  -w, --wait-time: The value for ReceiveMessageWaitTimeSeconds of the queue for long polling." 
  $"\n      Default is {ReceiveMessageWaitTime}.");
}

}
// = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
  // Class that represents a command line on the console or terminal.
  // (This is the same for all examples. When you have seen it once, you can ignore it.)
  public static class CommandLine
  {
    // Method to parse a command line of the form: "--param value" or "-p value".
    // If "param" is found without a matching "value", Dictionary.Value is an empty string.
    // If "value" is found without a matching "param", Dictionary.Key is "--NoKeyN"
    //  where "N" represents sequential numbers.
    public static Dictionary Parse(string[] args)
    {
      var parsedArgs = new Dictionary();
      int i = 0, n = 0;
      while(i < args.Length)
      {
        // If the first argument in this iteration starts with a dash it's an option.
        if(args[i].StartsWith("-"))
        {
          var key = args[i];
          var value = string.Empty;
      // Is there a value that goes with this option?
      if((i < args.Length) && (!args[i].StartsWith("-"))) value = args[i];
      parsedArgs.Add(key, value);
    }

    // If the first argument in this iteration doesn't start with a dash, it's a value
    else
    {
      parsedArgs.Add("--NoKey"  n.ToString(), args[i]);
      n;
    }
  }

  return parsedArgs;
}

//
// Method to get a parameter from the parsed command-line arguments
public static string GetParameter(
  Dictionary<string,string> parsedArgs, string def, params string[] keys)
{
  string retval = null;
  foreach(var key in keys)
    if(parsedArgs.TryGetValue(key, out retval)) break;
  return retval ?? def;
}

//
// Exit with an error.
public static void ErrorExit(string msg, int code=1)
{
  Console.WriteLine("\nError");
  Console.WriteLine(msg);
  Environment.Exit(code);
}

}
}
```
Additional considerations
 Your queue name must be composed of alphanumeric characters, hyphens, and underscores.
 Queue names and queue URLs are case-sensitive
 If you need the queue URL but only have the queue name, use one of the AmazonSQSClient.GetQueueUrlAsync methods.
 For information about the various queue attributes you can set, see CreateQueueRequest in the AWS SDK for .NET API Reference or SetQueueAttributes in the Amazon Simple Queue Service API Reference.
 This example specifies long polling for all messages on the queue that you create. This is done by using the ReceiveMessageWaitTimeSeconds attribute.
You can also specify long polling during a call to the ReceiveMessageAsync methods of the AmazonSQSClient class. For more information, see Receiving Amazon SQS messages.
For information about short polling versus long polling, see Short and long polling in the Amazon Simple Queue Service Developer Guide.
 A dead letter queue is one that other (source) queues can target for messages that aren't processed successfully. For more information, see Amazon SQS dead-letter queues in the Amazon Simple Queue Service Developer Guide.
 You can also see the list of queues and the results of this example in the Amazon SQS console.