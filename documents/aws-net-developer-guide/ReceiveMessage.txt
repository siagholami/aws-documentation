
Take the survey!
Help us improve the AWS SDK for .NET and its documentation by sharing your experience. Click here to take a quick survey.

Receiving Amazon SQS messages
This example shows you how to use the AWS SDK for .NET to receive messages from an Amazon SQS queue, which you can create programmatically or by using the Amazon SQS console. The application reads a single message from the queue, processes the message (in this case, displays the message body on the console), and then deletes the message from the queue. The application repeats these steps until the user types a key on the keyboard.
This example and the previous example about sending messages can be used together to see message flow in Amazon SQS.
The following sections provide snippets of this example. The complete code for the example is shown after that, and can be built and run as is.
Topics
 Receive a message
 Delete a message
 Complete code
Receive a message
The following snippet receives a message from the queue identified by the given queue URL.
The example at the end of this topic shows this snippet in use.
//
    // Method to read a message from the given queue
    // In this example, it gets one message at a time
    private static async Task<ReceiveMessageResponse> GetMessage(
      IAmazonSQS sqsClient, string qUrl, int waitTime=0)
    {
      return await sqsClient.ReceiveMessageAsync(new ReceiveMessageRequest{
        QueueUrl=qUrl,
        MaxNumberOfMessages=MaxMessages,
        WaitTimeSeconds=waitTime
        // (Could also request attributes, set visibility timeout, etc.)
      });
    }
Delete a message
The following snippet deletes a message from the queue identified by the given queue URL.
The example at the end of this topic shows this snippet in use.
//
    // Method to delete a message from a queue
    private static async Task DeleteMessage(
      IAmazonSQS sqsClient, Message message, string qUrl)
    {
      Console.WriteLine($"\nDeleting message {message.MessageId} from queue...");
      await sqsClient.DeleteMessageAsync(qUrl, message.ReceiptHandle);
    }
Complete code
This section shows relevant references and the complete code for this example.
SDK references
NuGet packages:
 AWSSDK.SQS
Programming elements:
 Namespace Amazon.SQS
Class AmazonSQSClient
 Namespace Amazon.SQS.Model
Class ReceiveMessageRequest
Class ReceiveMessageResponse
The code
```
using System;
using System.Threading.Tasks;
using Amazon.SQS;
using Amazon.SQS.Model;
namespace SQSReceiveMessages
{
  class Program
  {
    private const int MaxMessages = 1;
    private const int WaitTime = 2;
    static async Task Main(string[] args)
    {
      // Do some checks on the command-line
      if(args.Length == 0)
      {
        Console.WriteLine("\nUsage: SQSReceiveMessages queue_url");
        Console.WriteLine("   queue_url - The URL of an existing SQS queue.");
        return;
      }
      if(!args[0].StartsWith("https://sqs."))
      {
        Console.WriteLine("\nThe command-line argument isn't a queue URL:");
        Console.WriteLine($"{args[0]}");
        return;
      }
  // Create the Amazon SQS client
  var sqsClient = new AmazonSQSClient();

  // (could verify that the queue exists)
  // Read messages from the queue and perform appropriate actions
  Console.WriteLine($"Reading messages from queue\n  {args[0]}");
  Console.WriteLine("Press any key to stop. (Response might be slightly delayed.)");
  do
  {
    var msg = await GetMessage(sqsClient, args[0], WaitTime);
    if(msg.Messages.Count != 0)
    {
      if(ProcessMessage(msg.Messages[0]))
        await DeleteMessage(sqsClient, msg.Messages[0], args[0]);
    }
  } while(!Console.KeyAvailable);
}


//
// Method to read a message from the given queue
// In this example, it gets one message at a time
private static async Task<ReceiveMessageResponse> GetMessage(
  IAmazonSQS sqsClient, string qUrl, int waitTime=0)
{
  return await sqsClient.ReceiveMessageAsync(new ReceiveMessageRequest{
    QueueUrl=qUrl,
    MaxNumberOfMessages=MaxMessages,
    WaitTimeSeconds=waitTime
    // (Could also request attributes, set visibility timeout, etc.)
  });
}


//
// Method to process a message
// In this example, it simply prints the message
private static bool ProcessMessage(Message message)
{
  Console.WriteLine($"\nMessage body of {message.MessageId}:");
  Console.WriteLine($"{message.Body}");
  return true;
}


//
// Method to delete a message from a queue
private static async Task DeleteMessage(
  IAmazonSQS sqsClient, Message message, string qUrl)
{
  Console.WriteLine($"\nDeleting message {message.MessageId} from queue...");
  await sqsClient.DeleteMessageAsync(qUrl, message.ReceiptHandle);
}

}
}
```
Additional considerations
 To specify long polling, this example uses the WaitTimeSeconds property for each call to the ReceiveMessageAsync method.
You can also specify long polling for all messages on a queue by using the ReceiveMessageWaitTimeSeconds attribute when creating or updating the queue.
For information about short polling versus long polling, see Short and long polling in the Amazon Simple Queue Service Developer Guide.
 During message processing, you can use the receipt handle to change the message visibility timeout. For information about how to do this, see the ChangeMessageVisibilityAsync methods of the AmazonSQSClient class.
 Calling the DeleteMessageAsync method unconditionally removes the message from the queue, regardless of the visibility timeout setting.