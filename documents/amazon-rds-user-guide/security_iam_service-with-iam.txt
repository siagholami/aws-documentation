How Amazon RDS Works with IAM
Before you use IAM to manage access to Amazon RDS, you should understand what IAM features are available to use with Amazon RDS. To get a high-level view of how Amazon RDS and other AWS services work with IAM, see AWS Services That Work with IAM in the IAM User Guide.
Topics
 Amazon RDS Identity-Based Policies
 Amazon RDS Resource-Based Policies
 Authorization Based on Amazon RDS Tags
 Amazon RDS IAM Roles
Amazon RDS Identity-Based Policies
With IAM identity-based policies, you can specify allowed or denied actions and resources as well as the conditions under which actions are allowed or denied. Amazon RDS supports specific actions, resources, and condition keys. To learn about all of the elements that you use in a JSON policy, see IAM JSON Policy Elements Reference in the IAM User Guide.
Actions
The Action element of an IAM identity-based policy describes the specific action or actions that will be allowed or denied by the policy. Policy actions usually have the same name as the associated AWS API operation. The action is used in a policy to grant permissions to perform the associated operation. 
Policy actions in Amazon RDS use the following prefix before the action: rds:. For example, to grant someone permission to describe DB instances with the Amazon RDS DescribeDBInstances API operation, you include the rds:DescribeDBInstances action in their policy. Policy statements must include either an Action or NotAction element. Amazon RDS defines its own set of actions that describe tasks that you can perform with this service.
To specify multiple actions in a single statement, separate them with commas as follows:
"Action": [
      "rds:action1",
      "rds:action2"
You can specify multiple actions using wildcards (*). For example, to specify all actions that begin with the word Describe, include the following action:
"Action": "rds:Describe*"
To see a list of Amazon RDS actions, see Actions Defined by Amazon RDS in the IAM User Guide.
Resources
The Resource element specifies the object or objects to which the action applies. Statements must include either a Resource or a NotResource element. You specify a resource using an ARN or using the wildcard (*) to indicate that the statement applies to all resources.
The DB instance resource has the following ARN:
arn:${Partition}:rds:${Region}:${Account}:{ResourceType}/${Resource}
For more information about the format of ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
For example, to specify the dbtest DB instance in your statement, use the following ARN:
"Resource": "arn:aws:rds:us-west-2:123456789012:db:dbtest"
To specify all DB instances that belong to a specific account, use the wildcard (*):
"Resource": "arn:aws:rds:us-east-1:123456789012:db:*"
Some RDS API operations, such as those for creating resources, cannot be performed on a specific resource. In those cases, you must use the wildcard (*).
"Resource": "*"
Many Amazon RDS API operations involve multiple resources. For example, CreateDBInstance creates a DB instance. You can specify that an IAM user must use a specific security group and parameter group when creating a DB instance. To specify multiple resources in a single statement, separate the ARNs with commas. 
"Resource": [
      "resource1",
      "resource2"
To see a list of Amazon RDS resource types and their ARNs, see Resources Defined by Amazon RDS in the IAM User Guide. To learn with which actions you can specify the ARN of each resource, see Actions Defined by Amazon RDS.
Condition Keys
The Condition element (or Condition block) lets you specify conditions in which a statement is in effect. The Condition element is optional. You can build conditional expressions that use condition operators, such as equals or less than, to match the condition in the policy with values in the request. 
If you specify multiple Condition elements in a statement, or multiple keys in a single Condition element, AWS evaluates them using a logical AND operation. If you specify multiple values for a single condition key, AWS evaluates the condition using a logical OR operation. All of the conditions must be met before the statement's permissions are granted.
You can also use placeholder variables when you specify conditions. For example, you can grant an IAM user permission to access a resource only if it is tagged with their IAM user name. For more information, see IAM Policy Elements: Variables and Tags in the IAM User Guide. 
Amazon RDS defines its own set of condition keys and also supports using some global condition keys. To see all AWS global condition keys, see AWS Global Condition Context Keys in the IAM User Guide.
All RDS API operations support the aws:RequestedRegion condition key. 
To see a list of Amazon RDS condition keys, see Condition Keys for Amazon RDS in the IAM User Guide. To learn with which actions and resources you can use a condition key, see Actions Defined by Amazon RDS.
Examples
To view examples of Amazon RDS identity-based policies, see Amazon RDS Identity-Based Policy Examples.
Amazon RDS Resource-Based Policies
Amazon RDS does not support resource-based policies.
Authorization Based on Amazon RDS Tags
You can attach tags to Amazon RDS resources or pass tags in a request to Amazon RDS. To control access based on tags, you provide tag information in the condition element of a policy using the rds:ResourceTag/key-name, aws:RequestTag/key-name, or aws:TagKeys condition keys. For more information about tagging Amazon RDS resources, see Specifying Conditions: Using Custom Tags.
To view an example identity-based policy for limiting access to a resource based on the tags on that resource, see Grant Permission for Actions on a Resource with a Specific Tag with Two Different Values.
Amazon RDS IAM Roles
An IAM role is an entity within your AWS account that has specific permissions.
Using Temporary Credentials with Amazon RDS
You can use temporary credentials to sign in with federation, assume an IAM role, or to assume a cross-account role. You obtain temporary security credentials by calling AWS STS API operations such as AssumeRole or GetFederationToken. 
Amazon RDS supports using temporary credentials. 
Service-Linked Roles
Service-linked roles allow AWS services to access resources in other services to complete an action on your behalf. Service-linked roles appear in the Roles list in the IAM Management Console and are owned by the service. An IAM administrator can view but not edit the permissions for service-linked roles.
Amazon RDS supports service-linked roles. For details about creating or managing Amazon RDS service-linked roles, see Using Service-Linked Roles for Amazon RDS.
Service Roles
This feature allows a service to assume a service role on your behalf. This role allows the service to access resources in other services to complete an action on your behalf. Service roles appear in the Roles list in the IAM Management Console and are owned by your account. This means that an IAM administrator can change the permissions for this role. However, doing so might break the functionality of the service.
Amazon RDS supports service roles.