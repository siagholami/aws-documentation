Test communications

On your computer, open two command-line windows. Just as in Module 5, one window is for the GG_Switch device and the other is for the GG_TrafficLight device. You use them to run the same commands that you ran in Module 5.

Run the following commands for the GG_Switch device:
cd path-to-certs-folder
   python lightController.py --endpoint AWS_IOT_ENDPOINT --rootCA root-ca-cert.pem --cert switch.cert.pem --key switch.private.key --thingName GG_TrafficLight --clientId GG_Switch
Run the following commands for the GG_TrafficLight device:
cd path-to-certs-folder
   python trafficLight.py --endpoint AWS_IOT_ENDPOINT --rootCA root-ca-cert.pem --cert light.cert.pem --key light.private.key --thingName GG_TrafficLight --clientId GG_TrafficLight
Every 20 seconds, the switch updates the shadow state to G, Y, and R, and the light displays its new state.


The function handler of the Lambda function is triggered on every third green light (every three minutes), and a new DynamoDB record is created. After lightController.py and trafficLight.py have run for three minutes, go to the AWS Management Console, and open the DynamoDB console.


Choose US East (N. Virginia) in the AWS Region menu. This is the Region where the GG_Car_Aggregator function creates the table.


In the navigation pane, choose Tables, and then choose the CarStats table. 



On the Items tab, you should see entries with basic statistics on cars passed (one entry for every three minutes). You might need to choose the refresh button to view updates to the table.



If the test is not successful, you can look for troubleshooting information in the Greengrass logs.


Switch to the root user and navigate to the log directory. Access to AWS IoT Greengrass logs requires root permissions.
sudo su
  cd /greengrass/ggc/var/log


Check runtime.log for errors.
cat system/runtime.log | grep 'ERROR'


Check the log generated by the Lambda function.
cat user/region/account-id/GG_Car_Aggregator.log
 The lightController.py and trafficLight.py scripts store connection information in the groupCA folder, which is created in the same folder as the scripts. If you receive connection errors, make sure that the IP address in the ggc-host file matches the single IP address endpoint that you configured for your core in this step.


For more information, see Troubleshooting AWS IoT Greengrass.
This is the end of the basic tutorial. You should now understand the AWS IoT Greengrass programming model and its fundamental concepts, including AWS IoT Greengrass cores, groups, subscriptions, devices, and the deployment process for Lambda functions running at the edge.
You can delete the DynamoDB table and the Greengrass Lambda functions and subscriptions. To stop communications between the AWS IoT Greengrass core device and the AWS IoT cloud, open a terminal on the core device and run one of the following commands:
 To shut down the AWS IoT Greengrass core device:
sudo halt
 To stop the AWS IoT Greengrass daemon:
cd /greengrass/ggc/core/
  sudo ./greengrassd stop