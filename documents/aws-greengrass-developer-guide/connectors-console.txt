Getting started with Greengrass connectors (console)
This feature is available for AWS IoT Greengrass Core v1.7 and later.
This tutorial shows how to use the AWS Management Console to work with connectors.

Use connectors to accelerate your development life cycle. Connectors are prebuilt, reusable modules that can make it easier to interact with services, protocols, and resources. They can help you deploy business logic to Greengrass devices more quickly. For more information, see Integrate with services and protocols using Greengrass connectors.
In this tutorial, you configure and deploy the  Twilio Notifications connector. The connector receives Twilio message information as input data, and then triggers a Twilio text message. The data flow is shown in following diagram.

After you configure the connector, you create a Lambda function and a subscription.
 The function evaluates simulated data from a temperature sensor. It conditionally publishes the Twilio message information to an MQTT topic. This is the topic that the connector subscribes to.
 The subscription allows the function to publish to the topic and the connector to receive data from the topic.
The Twilio Notifications connector requires a Twilio auth token to interact with the Twilio API. The token is a text type secret created in AWS Secrets Manager and referenced from a group resource. This enables AWS IoT Greengrass to create a local copy of the secret on the Greengrass core, where it is encrypted and made available to the connector. For more information, see Deploy secrets to the AWS IoT Greengrass core.
The tutorial contains the following high-level steps:


Create a Secrets Manager secret


Add a secret resource to a group


Add a connector to the group


Create a Lambda function deployment package


Create a Lambda function


Add a function to the group


Add subscriptions to the group


Deploy the group


Test the solution


The tutorial should take about 20 minutes to complete.
Prerequisites
To complete this tutorial, you need:


A Greengrass group and a Greengrass core (v1.9.3 or later). To learn how to create a Greengrass group and core, see Getting started with AWS IoT Greengrass. The Getting Started tutorial also includes steps for installing the AWS IoT Greengrass Core software.
Python 3.7 installed on the AWS IoT Greengrass core device.
AWS IoT Greengrass must be configured to support local secrets, as described in Secrets Requirements.
Note
This requirement includes allowing access to your Secrets Manager secrets. If you're using the default Greengrass service role, Greengrass has permission to get the values of secrets with names that start with greengrass-.
A Twilio account SID, auth token, and Twilio-enabled phone number. After you create a Twilio project, these values are available on the project dashboard.
Note
You can use a Twilio trial account. If you're using a trial account, you must add non-Twilio recipient phone numbers to a list of verified phone numbers. For more information, see  How to Work with your Free Twilio Trial Account.

Step 1: Create a Secrets Manager secret
In this step, you use the AWS Secrets Manager console to create a text type secret for your Twilio auth token.


Sign in to the AWS Secrets Manager console.
Note
For more information about this process, see  Step 1: Create and store your secret in AWS Secrets Manager in the AWS Secrets Manager User Guide.


Choose Store a new secret.


Under Select secret type, choose Other type of secrets.


Under Specify the key/value pairs to be stored for this secret, on the Plaintext tab, enter your Twilio auth token. Remove all of the JSON formatting and enter only the token value.



Keep DefaultEncryptionKey selected for the encryption key, and then choose Next.
Note
You aren't charged by AWS KMS if you use the default AWS managed key that Secrets Manager creates in your account.


For Secret name, enter greengrass-TwilioAuthToken, and then choose Next.
Note
By default, the Greengrass service role allows AWS IoT Greengrass to get the value of secrets with names that start with greengrass-. For more information, see secrets requirements.


This tutorial doesn't require rotation, so choose Disable automatic rotation, and then choose Next.


On the Review page, review your settings, and then choose Store.


Next, you create a secret resource in your Greengrass group that references the secret.
Step 2: Add a secret resource to a Greengrass group
In this step, you add a secret resource to the Greengrass group. This resource is a reference to the secret that you created in the previous step.


In the AWS IoT console, choose Greengrass, and then choose Groups.


Choose the group that you want to add the secret resource to.


On the group configuration page, choose Resources, and then choose Secret. This tab displays the secret resources that belong to the group. You can add, edit, and remove secret resources from this tab.

Note
Alternatively, the console allows you to create a secret and secret resource when you configure a connector or Lambda function. You can do this from the connector's Configure parameters page or the Lambda function's Resources page.


Choose Add a secret resource.


On the Add a secret resource to your group page, choose Select, and then choose greengrass-TwilioAuthToken.


On the Select labels (Optional) page, choose Next. The AWSCURRENT staging label represents the latest version of the secret. This label is always included in a secret resource.
Note
This tutorial requires the AWSCURRENT label only. You can optionally include labels that are required by your Lambda function or connector.


On the Name your secret resource page, enter MyTwilioAuthToken, and then choose Save.


Step 3: Add a connector to the Greengrass group
In this step, you configure parameters for the Twilio Notifications connector and add it to the group.


On the group configuration page, choose Connectors, and then choose Add a connector.



On the Select a connector page, choose Twilio Notifications, and then choose Next.


On the Configure parameters page:
    For Twilio auth token resource, choose MyTwilioAuthToken. This is the secret resource that you created in the previous step.
Note
When you choose the resource, the ARN of Twilio auth token secret property is populated for you.
    For Default from phone number, enter your Twilio-enabled phone number.
    For Twilio account SID, enter your Twilio account SID.


Choose Add.


Step 4: Create a Lambda function deployment package

To create a Lambda function, you must first create a Lambda function deployment package that contains the function code and dependencies. Greengrass Lambda functions require the AWS IoT Greengrass Core SDK for tasks such as communicating with MQTT messages in the core environment and accessing local secrets. This tutorial creates a Python function, so you use the Python version of the SDK in the deployment package.


 From the AWS IoT Greengrass Core SDK downloads page, download the AWS IoT Greengrass Core SDK for Python to your computer.


Unzip the downloaded package to get the SDK. The SDK is the greengrasssdk folder.


Save the following Python code function in a local file named temp_monitor.py.


```
   import greengrasssdk
   import json
   import random
client = greengrasssdk.client('iot-data')
# publish to the Twilio Notifications connector through the twilio/txt topic
   def function_handler(event, context):
       temp = event['temperature']
   # check the temperature
   # if greater than 30C, send a notification
   if temp > 30:
       data = build_request(event)
       client.publish(topic='twilio/txt', payload=json.dumps(data))
       print('published:'  str(data))

   print('temperature:'  str(temp))
   return

# build the Twilio request from the input data
   def build_request(event):
       to_name = event['to_name']
       to_number = event['to_number']
       temp_report = 'temperature:'  str(event['temperature'])
   return {
       "request": {
           "recipient": {
               "name": to_name,
               "phone_number": to_number,
               "message": temp_report
           }
       },
       "id": "request_"  str(random.randint(1,101))
   }

```

Zip the following items into a file named temp_monitor_python.zip. When creating the ZIP file, include only the code and dependencies, not the containing folder.
    temp_monitor.py. App logic.
    greengrasssdk. Required library for Python Greengrass Lambda functions that publish MQTT messages.

This is your Lambda function deployment package.
Now, create a Lambda function that uses the deployment package.
Step 5: Create a Lambda function in the AWS Lambda console
In this step, you use the AWS Lambda console to create a Lambda function and configure it to use your deployment package. Then, you publish a function version and create an alias.


First, create the Lambda function.


In the AWS Management Console, choose Services, and open the AWS Lambda console.


Choose Create function and then choose Author from scratch.


In the Basic information section, use the following values:

For Function name, enter TempMonitor.
For Runtime, choose Python 3.7.
For Permissions, keep the default setting. This creates an execution role that grants basic Lambda permissions. This role isn't used by AWS IoT Greengrass.



At the bottom of the page, choose Create function.


Next, register the handler and upload your Lambda function deployment package.


On the Configuration tab for the TempMonitor function, in Function code, use the following values:

For Code entry type, choose Upload a .zip file.
For Runtime, choose Python 3.7.
For Handler, enter temp_monitor.function_handler



Choose Upload.


Choose your temp_monitor_python.zip deployment package.


Choose Save.
Note
The Test button on the AWS Lambda console doesn't work with this function. The AWS IoT Greengrass Core SDK doesn't contain modules that are required to run your Greengrass Lambda functions independently in the AWS Lambda console. These modules (for example, greengrass_common) are supplied to the functions after they are deployed to your Greengrass core.
Tip
You can see your code in the Function code section by choosing Edit code inline from the Code entry type menu.


Now, publish the first version of your Lambda function and create an alias for the version.
Note
Greengrass groups can reference a Lambda function by alias (recommended) or by version. Using an alias makes it easier to manage code updates because you don't have to change your subscription table or group definition when the function code is updated. Instead, you just point the alias to the new function version.


From the Actions menu, choose Publish new version.


For Version description, enter First version, and then choose Publish.


On the TempMonitor: 1 configuration page, from the Actions menu, choose Create alias.


On the Create a new alias page, use the following values:

For Name, enter GG_TempMonitor.
For Version, choose 1.
Note
AWS IoT Greengrass doesn't support Lambda aliases for $LATEST versions.



Choose Create.


Now you're ready to add the Lambda function to your Greengrass group.
Step 6: Add a Lambda function to the Greengrass group
In this step, you add the Lambda function to the group and then configure its lifecycle and environment variables. For more information, see Controlling execution of Greengrass Lambda functions by using group-specific configuration.


On the group configuration page, choose Lambdas, and then choose Add Lambda.



On the Add a Lambda to your Greengrass Group page, choose Use existing Lambda.



On the Use existing Lambda page, choose TempMonitor, and then choose Next.


On the Select a Lambda version page, choose Alias:GG_TempMonitor, and then choose Finish.


Step 7: Add subscriptions to the Greengrass group
In this step, you add a subscription that enables the Lambda function to send input data to the connector. The connector defines the MQTT topics that it subscribes to, so this subscription uses one of the topics. This is the same topic that the example function publishes to.
For this tutorial, you also create subscriptions that allow the function to receive simulated temperature readings from AWS IoT and allow AWS IoT to receive status information from the connector.


On the group configuration page, choose Subscriptions, and then choose Add Subscription.



On the Select your source and target page, configure the source and target, as follows:


For Select a source, choose Lambdas, and then choose TempMonitor.


For Select a target, choose Connectors, and then choose Twilio Notifications.


Choose Next.


On the Filter your data with a topic page, for Required topic syntax, choose twilio/txt, and then choose Next.


Choose Finish.


Repeat steps 1 - 4 to create a subscription that allows AWS IoT to publish messages to the function.


For Select a source, choose Services, and then choose IoT Cloud.


For Select a target, choose Lambdas, and then choose TempMonitor.


For Topic filter, enter temperature/input.


Repeat steps 1 - 4 to create a subscription that allows the connector to publish messages to AWS IoT.


For Select a source, choose Connectors, and then choose Twilio Notifications.


For Select a target, choose Services, and then choose IoT Cloud.


For Topic filter, twilio/message/status is entered for you. This is the predefined topic that the connector publishes to.


Step 8: Deploy the Greengrass group
Deploy the group to the core device.


Make sure that the AWS IoT Greengrass core is running. Run the following commands in your Raspberry Pi terminal, as needed.


To check whether the daemon is running:
ps aux | grep -E 'greengrass.*daemon'
If the output contains a root entry for /greengrass/ggc/packages/ggc-version/bin/daemon, then the daemon is running.
Note
The version in the path depends on the AWS IoT Greengrass Core software version that's installed on your core device.


To start the daemon:
cd /greengrass/ggc/core/
  sudo ./greengrassd start


On the group configuration page, choose Deployments, and from the Actions menu, choose Deploy.



If prompted, on the Configure how devices discover your core page, choose Automatic detection.


This enables devices to automatically acquire connectivity information for the core, such as IP address, DNS, and port number. Automatic detection is recommended, but AWS IoT Greengrass also supports manually specified endpoints. You're only prompted for the discovery method the first time that the group is deployed.

Note
If prompted, grant permission to create the Greengrass service role and associate it with your AWS account in the current AWS Region. This role allows AWS IoT Greengrass to access your resources in AWS services.
The Deployments page shows the deployment timestamp, version ID, and status. When completed, the status displayed for the deployment should be Successfully completed.
For troubleshooting help, see Troubleshooting AWS IoT Greengrass.
Note
A Greengrass group can contain only one version of the connector at a time. For information about upgrading a connector version, see Upgrading connector versions.
Test the solution



On the AWS IoT console home page, choose Test.



For Subscriptions, use the following values, and then choose Subscribe to topic. The Twilio Notifications connector publishes status information to this topic.  
[See the AWS documentation website for more details]


For Publish, use the following values, and then choose Publish to topic to invoke the function.  
[See the AWS documentation website for more details]


If successful, the recipient receives the text message and the console displays the success status from the output data.
Now, change the temperature in the input message to 29 and publish. Because this is less than 30, the TempMonitor function doesn't trigger a Twilio message.
See also

Integrate with services and protocols using Greengrass connectors
AWS-provided Greengrass connectors
