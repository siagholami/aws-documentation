Create a REST API with a mock integration in Amazon API Gateway
You can use this walkthrough to create and deploy an API with a mock integration in Amazon API Gateway. A mock integration enables your API to return a response for a request directly, without ever sending the request to a backend. This enables you to develop your API independently from your backend.
Topics
 Step 1: Create the API
 Step 2: Create the mock integration
 Step 3: Define the successful response
 Step 4: Add an HTTP 500 status code and error message
 Step 5: Test the mock integration
 Next steps
Step 1: Create the API
In this step, you create an API with a GET method and a query parameter in the API Gateway console.


If you haven't already done so, complete the steps in Prerequisites: Get ready to build an API in API Gateway.


Sign in to the API Gateway console at https://console.aws.amazon.com/apigateway.


If this is your first time using API Gateway, you see a page that introduces you to the features of the service. Under REST API, choose Build. When the Create Example API popup appears, choose OK.


If this is not your first time using API Gateway, choose Create API. Under REST API, choose Build.


Under Create new API, choose New API.


Under Settings:
    For API name, enter my-api.
    If desired, enter a description in the Description field; otherwise, leave it empty.
    Leave Endpoint Type set to Regional.


Choose Create API.


From the Actions dropdown menu, choose Create Method.


Under the resource name (/), you'll see a dropdown menu. Choose GET and then choose the checkmark icon to save your choice.


You'll see a / – GET – Setup pane. For Integration Type, choose Mock.



Choose Save. Now you'll see a / – GET – Method Execution pane:



The Method Execution pane contains these items, in clockwise order:
    Client: This box represents the client (browser or app) that calls your API's GET method. If you choose the Test link and then choose Test, this simulates a GET request from a client.
    Method Request: This box represents the client's GET request as it is received by API Gateway. If you choose Method Request, you'll see settings for things like authorization and modifying the method request before it's passed through to the backend as an integration request.
    Integration Request: This box represents the GET request as would be passed to the backend. For a mock integration, Mapping Templates can be used to specify the response (HTTP status code and message) to be returned.
    Mock Endpoint: This box represents the empty backend.
    Integration Response: This box represents the response from the backend, before it's passed to the client as a method response. For a mock integration, the response is defined in the Integration Request box (because there is no backend to supply it). You can configure the integration response to transform an arbitrary output into a form that's appropriate for the client application. You'll learn how to do that later in this walkthrough.
    Method Response: This box represents the HTTP status codes that can be returned to the client. For a mock integration, the rest of the response is configured in the Integration Response box for each status code.
For this step, leave everything set to the default values.
Step 2: Create the mock integration
In this step, instead of integrating with a backend, you add a query string parameter to your GET method, and then you specify the response codes and messages your API will return.
First, create the query string parameter:


In the / - GET - Method Execution pane, choose Method Request.


In the / - GET - Method Request pane, expand URL Query String Parameters.


Choose Add query string.


Type myParam for the Name and choose the checkmark icon to save your choice.


Next, create a mapping template that maps the query string parameter values to the HTTP status code values to be returned to the client.


Choose Method Execution.


Choose Integration Request.


Expand Mapping Templates.


For Request body passthrough, choose When there are no templates defined (recommended).


Under Content-Type, choose application/json.


Replace the template contents with the following:


{
     #if( $input.params('myParam') == "myValue" )
       "statusCode": 200
     #else
       "statusCode": 500
     #end
   }

Choose Save.

Step 3: Define the successful response
Now you'll create a mapping template that maps the HTTP 200 status code value to a success message to be returned to the client.


Choose Method Execution and Integration Response.


Expand the 200 response and then expand the Mapping Templates section.


Under Content-Type, choose application/json.


For the template contents, enter the following:


{
       "statusCode": 200,
       "message": "Hello from API Gateway!"
   }

Choose Save.
Note
There are two Save buttons in this pane. Be sure to choose the one in the Mapping Templates section.

Step 4: Add an HTTP 500 status code and error message
In this step you add an HTTP 500 status code that the frontend can return to the client, and then you map it to an error message.
First, add the 500 status code:


Choose Method Execution and Method Response.


Choose Add response.


For HTTP status, enter 500 and choose the checkmark icon to save the setting.


Now create a mapping template that maps the "returned" 500 status code value to an error message from the frontend to the client:


Choose Method Execution and Integration Response.


Choose Add integration response.


For HTTP status regex, enter 5\d{2}.


For Method response status, choose 500 from the dropdown menu and choose Save.


Expand the 500 response and then expand the Mapping Templates section, if it isn't already expanded.


Under Content-Type, choose Add mapping template.


In the box under Content-Type, enter application/json and choose the checkmark icon to save your choice.


For the template contents, enter the following:


{
       "statusCode": 500,
       "message": "This is an error message."
   }

Choose Save.
Note
There are two Save buttons in this pane. Be sure to choose the one in the Mapping Templates section.

Step 5: Test the mock integration
In this step, you test the mock integration.


Choose Method Execution and then choose Test.


Under Query Strings, enter myParam=myValue.


Choose Test.


You should see output like the following:



Under Query Strings, enter myParam="". Or simply delete everything in the Query Strings box.


Choose Test.


You should see output like the following:

Next steps
Explore any or all of the following topics to continue getting familiar with Amazon API Gateway.



To learn more about
Go to




Defining method requests and responses
Set up REST API methods in API Gateway


Defining integration responses
Set up an integration response in API Gateway


Setting up a custom domain name for your API
Setting up custom domain names for REST APIs


Enabling CORS for your API
Enabling CORS for a REST API resource



To get help with Amazon API Gateway from the community, see the API Gateway Discussion Forum. (When you enter this forum, AWS might require you to sign in.)
To get help with API Gateway directly from AWS, see the support options on the AWS Support page.
See also our frequently asked questions (FAQs), or contact us directly.