AWS OpsWorks User Guide

*Copyright Â© 2019 Amazon Web Services, Inc. and/or its affiliates. All rights reserved.***

Amazon's trademarks and trade dress may not be used in 
     connection with any product or service that is not Amazon's, 
     in any manner that is likely to cause confusion among customers, 
     or in any manner that disparages or discredits Amazon. All other 
     trademarks not owned by Amazon are the property of their respective
     owners, who may or may not be affiliated with, connected to, or 
     sponsored by Amazon.

Contents

What Is AWS OpsWorks?
AWS OpsWorks for Puppet Enterprise
Getting Started with OpsWorks for Puppet Enterprise
Create a Puppet Enterprise Master
Configure the Puppet Master Using the Starter Kit
Add Nodes for the Puppet Master to Manage
Sign in to the Puppet Enterprise Console
Optional: Use CodeCommit as a Puppet r10k Remote Control Repository


Create an AWS OpsWorks for Puppet Enterprise Master by using AWS CloudFormation
Back Up and Restore an OpsWorks for Puppet Enterprise Server
Back Up an OpsWorks for Puppet Enterprise Server
Restore an OpsWorks for Puppet Enterprise Server from a Backup


System Maintenance in OpsWorks for Puppet Enterprise
Adding Nodes Automatically in OpsWorks for Puppet Enterprise
Disassociate a Node from an OpsWorks for Puppet Enterprise Server
Delete an OpsWorks for Puppet Enterprise Server
Logging OpsWorks for Puppet Enterprise API Calls with AWS CloudTrail
Troubleshooting OpsWorks for Puppet Enterprise
AWS OpsWorks for Chef Automate
Getting Started with AWS OpsWorks for Chef Automate
Create a Chef Automate Server
Configure the Chef Server Using the Starter Kit
Add Nodes for the Chef Server to Manage
Sign in to the Chef Automate dashboard


Create an AWS OpsWorks for Chef Automate Server by using AWS CloudFormation
Back Up and Restore an AWS OpsWorks for Chef Automate Server
Back Up an AWS OpsWorks for Chef Automate Server
Restore an AWS OpsWorks for Chef Automate Server from a Backup


System Maintenance in AWS OpsWorks for Chef Automate
Compliance Scans in AWS OpsWorks for Chef Automate
Adding Nodes Automatically in AWS OpsWorks for Chef Automate
Disassociate a Node from an AWS OpsWorks for Chef Automate Server
Delete an AWS OpsWorks for Chef Automate Server
Reset Chef Automate Dashboard Credentials
Logging AWS OpsWorks for Chef Automate API Calls with AWS CloudTrail
Troubleshooting AWS OpsWorks for Chef Automate
AWS OpsWorks Stacks
Getting Started with AWS OpsWorks Stacks
Getting Started with a Sample Stack
Step 1: Complete the Prerequisites
Step 2: Create a Stack
Step 3: Start the Instance and Deploy the App
Step 4: Test the Deployed App on the Instance
Step 5: Explore the Stack's Settings
Step 6: Explore the Layer's Settings
Step 7: Explore the Instance's Settings and Logs
Step 8: Explore the App's Settings
Step 9: Explore Layer Monitoring Reports
Step 10: Explore Additional Stack Settings
Step 11 (Optional): Clean Up
Next Steps


Getting Started with Linux Stacks
Step 1: Complete the Prerequisites
Step 2: Create a Stack
Step 3: Add a Layer to the Stack
Step 4: Specify the App to Deploy to the Instance
Step 5: Launch an Instance
Step 6: Deploy the App to the Instance
Step 7: Test the Deployed App on the Instance
Step 8 (Optional): Clean Up
Next Steps
Learning More: Explore the Cookbook Used in This Walkthrough
Learning More: Explore the App Used in This Walkthrough


Getting Started with Windows Stacks
Step 1: Complete the Prerequisites
Step 2: Create a Basic Application Server Stack
Step 2.1: Create the Stack
Step 2.2: Authorize RDP Access
Step 2.3: Implement a Custom Cookbook
Step 2.4: Add an IIS Layer
Step 2.5: Deploy an App


Step 3: Scale Out IISExample
Add a Load Balancer


Next Steps


Getting Started with Cookbooks in AWS OpsWorks Stacks
Step 1: Create the Cookbook
Step 2: Create the Stack and its Components
Step 3: Run and Test the Recipe
Step 4: Update the Cookbook to Install a Package
Step 5: Update the Cookbook on the Instance and Run the Recipe
Step 6: Update the Cookbook to Add a User
Step 7: Update the Cookbook to Create a Directory
Step 8: Update the Cookbook to Create and Copy Files
Step 9: Update the Cookbook to Run a Command
Step 10: Update the Cookbook to Run a Script
Step 11: Update the Cookbook to Manage a Service
Step 12: Update the Cookbook to Use Custom JSON
Step 13: Update the Cookbook to Use Data Bags
Step 14: Update the Cookbook to Use Iteration
Step 15: Update the Cookbook to Use Conditional Logic
Step 16: Update the Cookbook to Use Community Cookbooks
Step 17: (Optional) Clean Up
Next Steps




AWS OpsWorks Stacks Best Practices
Best Practices: Root Device Storage for Instances
Best Practices: Optimizing the Number of Application Servers
Best Practices: Managing Permissions
Best Practices: Managing and Deploying Apps and Cookbooks
Packaging Cookbook Dependencies Locally


Stacks
Create a New Stack
Running a Stack in a VPC
Update a Stack
Clone a Stack
Run AWS OpsWorks Stacks Stack Commands
Using Custom JSON
Delete a Stack


Layers
OpsWorks Layer Basics
Creating an OpsWorks Layer
Editing an OpsWorks Layer's Configuration
Using Auto Healing to Replace Failed Instances
Deleting an OpsWorks Layer


Elastic Load Balancing Layer
Amazon RDS Service Layer
ECS Cluster Layers
Custom AWS OpsWorks Stacks Layers
Per-layer Operating System Package Installations


Instances
Using AWS OpsWorks Stacks Instances
AWS OpsWorks Stacks Operating Systems
Linux Operating Systems
Microsoft Windows Server


Adding an Instance to a Layer
Using Custom AMIs
Manually Starting, Stopping, and Rebooting 24/7 Instances
Managing Load with Time-based and Load-based Instances
Using Automatic Time-based Scaling
Using Automatic Load-based Scaling




Using Computing Resources Created Outside of AWS OpsWorks Stacks
Registering an Instance with an AWS OpsWorks Stacks Stack
Walkthrough: Register an Instance from Your Workstation
Registering Amazon EC2 and On-premises Instances
Preparing the Instance
Installing and Configuring the AWS CLI
Registering the Instance
Using the register Command
Example register Commands
Instance Registration Policies


Managing Registered Instances
Assigning a Registered Instance to a Layer
Unassigning a Registered Instance
Deregistering a Registered Instance
Registered Instance Life Cycle


Editing the Instance Configuration
Deleting AWS OpsWorks Stacks Instances
Using SSH to Log In to a Linux Instance
Using the Built-in MindTerm SSH Client
Using a Third-Party SSH Client


Using RDP to Log In to a Windows Instance


Apps
Adding Apps
Deploying Apps
Editing Apps
Connecting an Application to a Database Server
Using Environment Variables
Passing Data to Applications
Using Git Repository SSH Keys
Using Custom Domains
Running Multiple Applications on the Same Application Server


Using SSL


Cookbooks and Recipes
Cookbook Repositories
Chef Versions
Implementing Recipes for Chef 12.2 Stacks
Implementing Recipes for Chef 12 Stacks
Implementing Recipes for Chef 11.10 Stacks
Implementing Recipes for Chef 11.4 Stacks
Migrating an Existing Linux Stack to a new Chef Version


Ruby Versions
Installing Custom Cookbooks
Updating Custom Cookbooks
Executing Recipes
AWS OpsWorks Stacks Lifecycle Events
Automatically Running Recipes
Manually Running Recipes




Resource Management
Registering Resources with a Stack
Attaching and Moving Resources
Detaching Resources
Deregistering Resources


Tags
Monitoring
Monitoring Stacks using Amazon CloudWatch
Logging AWS OpsWorks Stacks API Calls with AWS CloudTrail
Using Amazon CloudWatch Logs with AWS OpsWorks Stacks
Monitoring Stacks using Amazon CloudWatch Events


Security and Permissions
Managing AWS OpsWorks Stacks User Permissions
Managing AWS OpsWorks Stacks Users
Creating an AWS OpsWorks Stacks Administrative User
Creating IAM Users for AWS OpsWorks Stacks
Importing Users into AWS OpsWorks Stacks
Editing AWS OpsWorks Stacks User Settings


Granting AWS OpsWorks Stacks Users Per-Stack Permissions
Managing AWS OpsWorks Stacks Permissions by Attaching an IAM Policy
Example Policies
AWS OpsWorks Stacks Permissions Levels


Signing in as an IAM User
Allowing AWS OpsWorks Stacks to Act on Your Behalf
Specifying Permissions for Apps Running on EC2 instances
Managing SSH Access
Installing an Amazon EC2 Key
Registering an IAM User's Public SSH Key


Managing Linux Security Updates
Using Security Groups


AWS OpsWorks Stacks Support for Chef 12 Linux
Moving Stack Settings from Attributes to Data Bags


Support for Previous Chef Versions in AWS OpsWorks Stacks
Chef 11.10 and Earlier Versions for Linux
Getting Started with Chef 11 Linux Stacks
Step 1: Complete the Prerequisites
Step 2: Create a Simple Application Server Stack - Chef 11
Step 2.1: Create a Stack - Chef 11
Step 2.2: Add a PHP App Server Layer - Chef 11
Step 2.3: Add an Instance to the PHP App Server Layer - Chef 11
Step 2.4: Create and Deploy an App - Chef 11
Step 3: Add a Back-end Data Store
Step 3.1: Add a Back-end Database
Step 3.2: Update SimplePHPApp
A Short Digression: Cookbooks, Recipes, and AWS OpsWorks Stacks Attributes
Step 3.3: Add the Custom Cookbooks to MyStack
Step 3.4: Run the Recipes
Step 3.5: Deploy SimplePHPApp, Version 2
Step 3.6: Run SimplePHPApp
Step 4: Scale Out MyStack
Step 4.1: Add a Load Balancer
Step 4.2: Add PHP App Server Instances
Step 4.3: Monitor MyStack
Step 5: Delete MyStack


Creating Your First Node.js Stack
Customizing AWS OpsWorks Stacks
Customizing AWS OpsWorks Stacks Configuration by Overriding Attributes
Attribute Precedence
Overriding Attributes With Custom JSON
Overriding AWS OpsWorks Stacks Attributes Using Custom Cookbook Attributes
Extending AWS OpsWorks Stacks Configuration Files Using Custom Templates
Extending a Layer
Using Recipes to Run Scripts
Using Chef Deployment Hooks
Running Cron Jobs on Linux Instances
Installing and Configuring Packages on Linux Instances
Creating a Custom Tomcat Server Layer
Attributes File
Setup Recipes
Configure Recipes
Deploy Recipes
Create a Stack and Run an Application
Stack Configuration and Deployment Attributes


Cookbooks 101
Cookbook Basics
Recipe Structure
Example 1: Installing Packages
Example 2: Managing Users
Example 3: Creating Directories
Example 4: Adding Flow Control
Example 5: Using Attributes
Example 6: Creating Files
Example 7: Running Commands and Scripts
Example 8: Managing Services
Example 9: Using Amazon EC2 Instances
Next Steps
Implementing Cookbooks for AWS OpsWorks Stacks
Running a Recipe on an AWS OpsWorks Stacks Linux Instance
Running a Recipe on a Windows Instance
Running a Windows PowerShell Script
Mocking the Stack Configuration and Deployment Attributes on Vagrant
Using Stack Configuration and Deployment Attribute Values
Obtaining Attribute Values Directly
Obtaining Attribute Values with Chef Search
Using Search on a Linux Stack
Using Search on a Windows Stack
Using the node Search Index on Windows Stacks
Using AWS OpsWorks Stacks-Specific Search Indexes on Windows Stacks






Using an External Cookbook on a Linux Instance: Berkshelf
Using the SDK for Ruby: Downloading Files from Amazon S3
Using the SDK for Ruby on a Vagrant Instance
Using the SDK for Ruby on an AWS OpsWorks Stacks Linux Instance
Using the SDK for Ruby on an AWS OpsWorks Stacks Windows Instance


Installing Windows Software
Installing a Windows Feature: IIS
Installing a Package on a Windows Instance


Overriding Built-In Attributes
Overriding Built-In Templates


Load Balancing a Layer
Migrating from Chef Server to AWS OpsWorks Stacks
AWS OpsWorks Stacks Layer Reference
HAProxy Layer Reference
HAProxy AWS OpsWorks Stacks Layer
MySQL Layer Reference
MySQL OpsWorks Layer
Application Server Layers Reference
AWS Flow (Ruby) Layer Reference
Java App Server Layer Reference
Node.js App Server Layer Reference
PHP App Server Layer Reference
Rails App Server Layer Reference
Static Web Server Layer Reference
Application Server Layers
AWS Flow (Ruby) Layer
Java App Server AWS OpsWorks Stacks Layer
Custom Configuration
Deploying Java Apps


Node.js App Server AWS OpsWorks Stacks Layer
PHP App Server AWS OpsWorks Stacks Layer
Rails App Server AWS OpsWorks Stacks Layer
Static Web Server AWS OpsWorks Stacks Layer
Custom Layer Reference
Other Layers Reference
Ganglia Layer Reference
Memcached Layer Reference
Other Layers
Ganglia Layer
Memcached


Cookbook Components
Attributes
Templates
Recipes


Stack Configuration and Deployment Attributes: Linux
opsworks Attributes
applications
instance Attributes
layers Attributes
rails_stack Attributes
stack Attributes
Other Top-level opsworks Attributes
opsworks_custom_cookbooks Attributes
dependencies Attributes
ganglia Attributes
mysql Attributes
passenger Attributes
opsworks_bundler Attributes
deploy Attributes
Other Top-Level Attributes


Built-in Cookbook Attributes
apache2 Attributes
deploy Attributes
haproxy Attributes
memached Attributes
mysql Attributes
nginx Attributes
opsworks_berkshelf Attributes
opsworks_java Attributes
passenger_apache2 Attributes
ruby Attributes
unicorn Attributes


Troubleshooting Chef 11.10 and Earlier Versions for Linux




Using AWS OpsWorks Stacks with Other AWS Services
Using a Back-end Data Store
How to Set up a Database Connection
How to Connect an Application Server Instance to Amazon RDS
Create an Amazon RDS MySQL Database
Customize the Stack to Connect to the RDS Database




Using ElastiCache Redis as an In-Memory Key-Value Store
Step 1: Create an ElastiCache Redis Cluster
Step 2: Set up a Rails Stack
Step 3: Create and Deploy a Custom Cookbook
Step 4: Assign the Recipe to a LifeCycle Event
Step 5: Add Access Information to the Stack Configuration JSON
Step 6: Deploy and run the App


Using an Amazon S3 Bucket
Step 1: Create an Amazon S3 Bucket
Step 2: Create a PHP App Server Stack
Step 3: Create and Deploy a Custom Cookbook
Step 4: Assign the Recipes to LifeCycle Events
Step 5: Add Access Information to the Stack Configuration and Deployment Attributes
Step 6: Deploy and Run PhotoApp


Using AWS CodePipeline with AWS OpsWorks Stacks
AWS CodePipeline with AWS OpsWorks Stacks - Chef 12 Stacks
Step 1: Create a stack, layer, and an instance in AWS OpsWorks Stacks
Step 2: Configure your stack and layer to use custom cookbooks
Step 3: Upload app code to an Amazon S3 bucket
Step 4: Add your app to AWS OpsWorks Stacks
Step 5: Create a pipeline in CodePipeline
Step 6: Verifying the app deployment in AWS OpsWorks Stacks
Step 7 (Optional): Update the app code to see CodePipeline redeploy your app automatically
Step 8 (Optional): Clean up resources


AWS CodePipeline with AWS OpsWorks Stacks - Chef 11 Stacks
Step 1: Create a stack, layer, and an instance in AWS OpsWorks Stacks
Step 2: Upload app code to an Amazon S3 bucket
Step 3: Add your app to AWS OpsWorks Stacks
Step 4: Create a pipeline in CodePipeline
Step 5: Verifying the app deployment in AWS OpsWorks Stacks
Step 6 (Optional): Update the app code to see CodePipeline redeploy your app automatically
Step 7 (Optional): Clean up resources






Using the AWS OpsWorks Stacks CLI
Create an Instance (create-instance)
Deploy an App (create-deployment)
List a Stack's Apps (describe-apps)
List a Stack's Commands (describe-commands)
List a Stack's Deployments (describe-deployments)
List a Stack's Elastic IP Addresses (describe-elastic-ips)
List a Stack's Instances (describe-instances)
List an Account's Stacks (describe-stacks)
List a Stack's Layers (describe-layers)
Execute a Recipe (create-deployment)
Install Dependencies (create-deployment)
Update the Stack Configuration (update-stack)


Debugging and Troubleshooting Guide
Debugging Recipes
Logging in to a Failed Instance
Chef Logs
Using the AWS OpsWorks Stacks Agent CLI


Common Debugging and Troubleshooting Issues
Troubleshooting AWS OpsWorks Stacks




AWS OpsWorks Stacks Agent CLI
agent_report
get_json
instance_report
list_commands
run_command
show_log
stack_state


AWS OpsWorks Stacks Data Bag Reference
App Data Bag (aws_opsworks_app)
Command Data Bag (aws_opsworks_command)
Amazon ECS Cluster Data Bag (aws_opsworks_ecs_cluster)
Elastic Load Balancing Data Bag (aws_opsworks_elastic_load_balancer)
Instance Data Bag (aws_opsworks_instance)
Layer Data Bag (aws_opsworks_layer)
Amazon RDS Data Bag (aws_opsworks_rds_db_instance)
Stack Data Bag (aws_opsworks_stack)
User Data Bag (aws_opsworks_user)


OpsWorks Agent Changes
AWS OpsWorks Stacks Resources
AWS OpsWorks Document History
