Upload a file to an S3 Bucket using the AWS SDK for .NET (low-level API)
The following C# example shows how to use the low-level AWS SDK for .NET multipart upload API to upload a file to an S3 bucket. For information about Amazon S3 multipart uploads, see Multipart upload overview.
Note
When you use the AWS SDK for .NET API to upload large objects, a timeout might occur while data is being written to the request stream. You can set an explicit timeout using the UploadPartRequest. 
The following C# example uploads a file to an S3 bucket using the low-level multipart upload API. For information about the example's compatibility with a specific version of the AWS SDK for .NET and instructions for creating and testing a working sample, see Running the Amazon S3 .NET Code Examples.
```
using Amazon;
using Amazon.Runtime;
using Amazon.S3;
using Amazon.S3.Model;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
namespace Amazon.DocSamples.S3
{
    class UploadFileMPULowLevelAPITest
    {
        private const string bucketName = " provide bucket name ";
        private const string keyName = " provide a name for the uploaded object ";
        private const string filePath = " provide the full path name of the file to upload ";
        // Specify your bucket region (an example region is shown).
        private static readonly RegionEndpoint bucketRegion = RegionEndpoint.USWest2;
        private static IAmazonS3 s3Client;
    public static void Main()
    {
        s3Client = new AmazonS3Client(bucketRegion);
        Console.WriteLine("Uploading an object");
        UploadObjectAsync().Wait(); 
    }

    private static async Task UploadObjectAsync()
    {
        // Create list to store upload part responses.
        List<UploadPartResponse> uploadResponses = new List<UploadPartResponse>();

        // Setup information required to initiate the multipart upload.
        InitiateMultipartUploadRequest initiateRequest = new InitiateMultipartUploadRequest
        {
            BucketName = bucketName,
            Key = keyName
        };

        // Initiate the upload.
        InitiateMultipartUploadResponse initResponse =
            await s3Client.InitiateMultipartUploadAsync(initiateRequest);

        // Upload parts.
        long contentLength = new FileInfo(filePath).Length;
        long partSize = 5 * (long)Math.Pow(2, 20); // 5 MB

        try
        {
            Console.WriteLine("Uploading parts");

            long filePosition = 0;
            for (int i = 1; filePosition < contentLength; i)
            {
                UploadPartRequest uploadRequest = new UploadPartRequest
                    {
                        BucketName = bucketName,
                        Key = keyName,
                        UploadId = initResponse.UploadId,
                        PartNumber = i,
                        PartSize = partSize,
                        FilePosition = filePosition,
                        FilePath = filePath
                    };

                // Track upload progress.
                uploadRequest.StreamTransferProgress =
                    new EventHandler<StreamTransferProgressArgs>(UploadPartProgressEventCallback);

                // Upload a part and add the response to our list.
                uploadResponses.Add(await s3Client.UploadPartAsync(uploadRequest));

                filePosition = partSize;
            }

            // Setup to complete the upload.
            CompleteMultipartUploadRequest completeRequest = new CompleteMultipartUploadRequest
                {
                    BucketName = bucketName,
                    Key = keyName,
                    UploadId = initResponse.UploadId
                 };
            completeRequest.AddPartETags(uploadResponses);

            // Complete the upload.
            CompleteMultipartUploadResponse completeUploadResponse =
                await s3Client.CompleteMultipartUploadAsync(completeRequest);
        }
        catch (Exception exception)
        {
            Console.WriteLine("An AmazonS3Exception was thrown: { 0}", exception.Message);

            // Abort the upload.
            AbortMultipartUploadRequest abortMPURequest = new AbortMultipartUploadRequest
            {
                BucketName = bucketName,
                Key = keyName,
                UploadId = initResponse.UploadId
            };
           await s3Client.AbortMultipartUploadAsync(abortMPURequest);
        }
    }
    public static void UploadPartProgressEventCallback(object sender, StreamTransferProgressArgs e)
    {
        // Process event. 
        Console.WriteLine("{0}/{1}", e.TransferredBytes, e.TotalBytes);
    }
}

}
```
More info
AWS SDK for .NET