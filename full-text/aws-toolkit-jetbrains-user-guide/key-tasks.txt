Key tasks for the AWS Toolkit for JetBrains
Use the following brief instructions to complete key tasks with the AWS Toolkit for JetBrains.
 Install the AWS Toolkit for JetBrains
 Update the AWS Toolkit for JetBrains
 Configure the AWS Toolkit for JetBrains to use an HTTP proxy
 Work with connections from the AWS Toolkit for JetBrains to AWS accounts
 Get the current AWS Region that the AWS Toolkit for JetBrains is using
 Switch between AWS Regions
 Open AWS Explorer within the AWS Toolkit for JetBrains
 Work with AWS services
   Work with AWS serverless applications
   Work with AWS Lambda functions
   Work with AWS CloudFormation stacks
   Work with Amazon CloudWatch Logs
   Work with Amazon ECS clusters in an account
   Work with Amazon EventBridge schemas
   Work with Amazon S3 buckets and objects
Install the AWS Toolkit for JetBrains

Setting up your AWS account to use AWS Toolkit for JetBrains


Create an AWS account, if you don't have an account already.


Create an administrator user and group in AWS Identity and Access Management (IAM) in the account, if you haven't done that already. 
Note
We recommend that you create or use a special type of user and group in the account for the AWS Toolkit for JetBrains to use, which we call an administrator IAM user and group. Although you can create a regular IAM user and group in the account for the toolkit to use, this approach might not allow the toolkit to have full access to all of the AWS resources and AWS serverless applications in that account. We support, but strongly discourage, using an AWS account root user with the AWS Toolkit for JetBrains.


Create an access key for the user, if you don't have an access key for that user already. 
Note
An access key contains both an access key ID value and a secret access key value. The AWS Toolkit for JetBrains needs to use both of these values later. Be sure to store them in a secure location. If you lose them, they're gone forever and can't be retrieved. However, you can always delete a lost access key, and then create a replacement access key. If you ever do this, you also need to change your toolkit connection settings. We support, but strongly discourage, creating an access key for an AWS account root user for the AWS Toolkit for JetBrains to use.


Installing and configuring AWS Toolkit for JetBrains


Ensure that a JetBrains IDE supported by AWS Toolkits is installed and running.


Open Settings / Preferences.


Choose Plugins.


On the Marketplace tab, in Search plugins in marketplace, begin entering AWS Toolkit. When AWS Toolkit by Amazon Web Services is displayed, choose it.



Choose Install.

Note
To use the AWS Toolkit for JetBrains to work with its available features for AWS CloudFormation, AWS Lambda, AWS Serverless, and Amazon ECS, you must install version 1.8 or later of the AWS Toolkit.


When the Third-party Plugins Privacy Note is displayed, choose Accept.


Choose Restart IDE, and when prompted, choose Restart.


Before you can use the AWS Toolkit for JetBrains to develop, test, analyze, and deploy AWS serverless applications or Lambda functions, be sure you have the following tools installed. Install the tools in this order:


AWS Command Line Interface (AWS CLI)


Docker (Docker must always be running whenever you develop, test, analyze, or deploy serverless applications or functions)


AWS Serverless Application Model Command Line Interface (AWS SAM CLI)


Before you can use the AWS Toolkit for JetBrains to debug code in Amazon ECS clusters, you must complete additional steps. For instructions, see the prerequisites.


After you install the AWS Toolkit for JetBrains (and, if you're working with AWS serverless applications, Lambda functions, or Amazon ECS clusters, you've installed the preceding additional required tools, in order), connect to an AWS account for the first time.


Top
Update the AWS Toolkit for JetBrains
After you install the AWS Toolkit for JetBrains, you can check for updates to the toolkit at any time and install them. 
To do this, with IntelliJ IDEA, PyCharm, WebStorm, or JetBrains Rider already running, do the following:


Open Settings / Preferences.


Choose Updates. (If no updates are displayed, you might need to choose Check new updates.)



Follow any on-screen instructions to finish updating the AWS Toolkit for JetBrains.


Restart the JetBrains IDE.


Configure the AWS Toolkit for JetBrains to Use an HTTP Proxy
After you install the AWS Toolkit for JetBrains, you can configure it to use an HTTP proxy. 
With IntelliJ IDEA, PyCharm, WebStorm, or JetBrains Rider already running, do one of the following:
 CLion – See Configure HTTP proxy on the CLion help website.
 GoLand – See HTTP Proxy on the GoLand help website.
 IntelliJ IDEA – See HTTP Proxy on the IntelliJ IDEA Help website.
 WebStorm – See HTTP Proxy on the WebStorm Help website.
 JetBrains Rider – See Configure HTTP Proxy on the JetBrains Rider help website.
 PhpStorm – See HTTP Proxy on the PhpStorm help website.
 PyCharm – See HTTP Proxy on the PyCharm Help website.
 RubyMine – See HTTP Proxy on the RubyMine help website.
After you complete the preceding instructions, the toolkit begins using those HTTP proxy settings.
Top
Work with connections from the AWS Toolkit for JetBrains to AWS accounts
After you install the AWS Toolkit for JetBrains, use the toolkit to do the following with AWS accounts:
 Connect to an AWS account for the first time
 Get the current connection
 Add multiple connections
 Switch between connections
 Change connection settings
 Delete a connection
Top
Connect to an AWS Account for the first time
We assume that you already installed the AWS Toolkit for JetBrains. To complete this procedure, you need an access key (which contains both an access key ID value and a secret access key value) for a user in IAM (which we recommend), or for an AWS account root user (which we strongly discourage). If you don't have an access key for a user in IAM already, create one.


With your access key ID value and secret access key value ready, do one of the following:
    On the status bar, choose AWS: No credentials selected, and then choose Edit AWS Credential file(s).


    Open AWS Explorer, if it isn't already open. Choose Configure AWS Connection, and then choose Edit AWS Credential file(s).




In the file, under [default], for aws_access_key_id, replace [accessKey1] with your access key ID value (for example, AKIAIOSFODNN7EXAMPLE).


If prompted, choose I want to edit this file anyway, and then choose OK.

For aws_secret_access_key, replace [secretKey1] with your secret access key value (for example, wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY).

The final results should look as shown here, following the named profile format.
```
   ... Other file contents omitted for brevity ...
[default]
   # ... Some comments ...
   aws_access_key_id = AKIAIOSFODNN7EXAMPLE
   # ... Some more comments ...
   # ... Some more comments ...
   # ... Some more comments ...
   # ... Some more comments ...
   aws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
... Other file contents omitted for brevity ...
   ``
**Note**  
The AWS Toolkit for JetBrains currently supports the following configuration variables:aws_access_key_idaws_secret_access_keyaws_session_tokencredential_processmfa_serialrole_arnsource_profile`
For more information, see AWS CLI Configuration Variables in the AWS CLI Command Reference.

Save and then close the file. The AWS Toolkit for JetBrains tries to connect to the account by using the preceding access key. 

After connecting, you can use the toolkit to work with AWS resources in that account, such as AWS serverless applications, AWS Lambda functions, and AWS CloudFormation stacks.
You can also have more than one connection available, so that you can switch between them.
After you connect, the AWS Toolkit for JetBrains selects the default AWS Region automatically. You might need to switch connections to work with different AWS resources.
Top
Add multiple connections
To complete this procedure, you must first have the additional access key (which contains both an access key ID value and a secret access key value) for a user in IAM (recommended) or AWS account root user (strongly discouraged). If you don't have an access key for a user IAM already, create one.


Connect for the first time, if you have not done so already.


With the additional access key ID value and secret access key value ready, do one of the following:
    On the status bar, choose AWS Connection Settings, and then choose All Credentials, Edit AWS Credential file(s).

    Open AWS Explorer, if it isn't already open, and then choose Show Options Menu (the settings icon). Choose AWS Connection Settings, All Credentials, Edit AWS Credential file(s).



In the file, add a named profile for each additional connection. Profile names can contain only the uppercase letters  A through Z, the lowercase letters a through z, the numbers 0 through 9, the hyphen character ( -), and the underscore character ( _). Profile names must be less than 64 characters in length. 


For example, for a named profile named myuser, use the following format.
[profile myuser]
   aws_access_key_id = AKIAIOSFODNN7EXAMPLE
   aws_secret_access_key = wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Note
The AWS Toolkit for JetBrains currently supports named profiles with only the following characters: A-Z, a-z, 0-9, underscore (_), and hyphen (-).
Currently, the toolkit supports only the following configuration variables:
aws_access_key_id
aws_secret_access_key
aws_session_token
credential_process
mfa_serial
role_arn
source_profile
For more information, see AWS CLI Configuration Variables in the AWS CLI Command Reference.

Save and then close the file. The AWS Toolkit for JetBrains displays the new connection in the AWS Connection Settings menu in both the status bar and in AWS Explorer.

Now that you have multiple connections, you can switch between them.
After you connect, you might need to switch connections to work with.
Top
Switch between connections


Add multiple connections, if you haven't done so already.


Do one of the following:
    On the status bar, choose AWS Connection Settings.
    Open AWS Explorer, if it isn't already open, and then choose AWS Connection Settings.


Choose the named profile to use for the new connection. If it isn't listed, choose All Credentials, and then choose the named profile to use. 



The AWS Toolkit for JetBrains switches to the new connection. This connection is now selected in the AWS Connection Settings menu in both the status bar and AWS Explorer.
After you connect, you might need to switch to working with AWS resources in that account that are in a different AWS Region.
Top
Change connection settings


Do one of the following:
    On the status bar, choose AWS Connection Settings, All Credentials, Edit AWS Credential file(s).

    Open AWS Explorer, if it isn't already open, and then choose Show Options Menu (the settings icon). Then choose AWS Connection Settings, All Credentials, Edit AWS Credential file(s).



Make your changes to the file, and then save and close the file. 


Top
Delete a connection


Do one of the following:
    On the status bar, choose AWS Connection Settings, All Credentials, Edit AWS Credential file(s).

    Open AWS Explorer, if it isn't already open, and then choose Show Options Menu (the settings icon). Then choose AWS Connection Settings, All Credentials, Edit AWS Credential file(s).



In the file, completely delete the named profile (including the named profile's name, access key ID, and secret access key) for the connection that you want to delete.


Save and then close the file. The AWS Toolkit for JetBrains removes the deleted connection from the AWS Connection Settings menu in both the status bar and in AWS Explorer.


After you delete a connection, you might need to switch to a different connection or connect for the first time again.
Top
Get the current connection
To check which connection the AWS Toolkit for JetBrains is currently using, do one of the following:
 On the status bar, see the current connection displayed in the AWS Connection Settings area.

 Open AWS Explorer, if it's not already open, and then choose Show Options Menu (the settings icon). Choose AWS Connection Settings. The current connection is selected.

You can also have more than one connection available, so that you can switch between them.
Top
Get the current AWS Region
To check which AWS Region the AWS Toolkit for JetBrains is currently using, do one of the following:
 On the status bar, see the current Region displayed in the AWS Connection Settings area.

 Open AWS Explorer, if it isn't already open, and then choose Show Options Menu (the settings icon). Choose AWS Connection Settings. The current Region is selected.

You can also switch to a different AWS Region.
Top
Switch between AWS Regions
To switch AWS Regions, do one of the following:
 On the status bar, choose AWS Connection Settings, and then choose the AWS Region that you want to switch to.

 Open AWS Explorer, if it isn't already open. Choose Show Options Menu (the settings icon), and then choose AWS Connection Settings. If the AWS Region that you want to switch to is listed, choose it. Otherwise, choose All Regions, and then choose the Region to switch to.

The AWS Toolkit for JetBrains switches to using the new Region. The Region is now selected in the AWS Connection Settings menu in both the status bar and AWS Explorer.
Top
Open AWS Explorer within the AWS Toolkit for JetBrains
To complete this procedure, you must first install the AWS Toolkit. Then, with IntelliJ IDEA, PyCharm, WebStorm, or JetBrains Rider already running, do one of the following:
 On the tool window bar, choose AWS Explorer.

 On the View menu, choose Tool Windows, AWS Explorer.

After you open AWS Explorer for the first time, use it to connect to an AWS account for the first time. After that, you can use AWS Explorer to work with AWS Lambda functions and AWS CloudFormation stacks in the account.
Top
Work with AWS Serverless Applications
After you install the AWS Toolkit for JetBrains and then use it to connect to an AWS account for the first time, you can use the toolkit to work with AWS serverless applications in an account, as follows:
 Create a serverless application
 Deploy a serverless application
 Change (update) the settings for a serverless application
 Delete a serverless application
Top
Create a serverless application
To complete this procedure, you must first install the AWS Toolkit for JetBrains, and if you haven't yet, connect to an AWS account for the first time. 


With IntelliJ IDEA, PyCharm, WebStorm, or JetBrains Rider already running, do one of the following:
    For IntelliJ IDEA or WebStorm, choose File, New, Project.
    For PyCharm, choose File, New Project.
    For JetBrains Rider, choose File, New for a new solution. Or right-click an existing solution in the Explorer tool window, and then choose Add, New Project.


For IntelliJ IDEA, choose AWS, AWS Serverless Application, and then choose Next.



For PyCharm, choose AWS Serverless Application.

For WebStorm, choose AWS Serverless Application.

For JetBrains Rider, choose AWS Serverless Application.



Complete the New Project dialog box (or the New Solution dialog box for JetBrains Rider), and then choose Finish (for IntelliJ IDEA) or Create (for PyCharm, WebStorm, or JetBrains Rider). The AWS Toolkit for JetBrains creates the project and adds the serverless application's code files to the new project.


If you're using IntelliJ IDEA, with the Project tool window already open and displaying the project that contains the serverless application's files, do one of the following:
    For Maven-based projects, right-click the project's pom.xml file, and then choose Add as Maven Project.

    For Gradle-based projects, right-click the project's build.gradle file, and then choose Import Gradle project.

Complete the Import Module from Gradle dialog box, and then choose OK.


After you create the serverless application, you can run (invoke) or debug the local version of an AWS Lambda function that is contained in that application.
You can also deploy the serverless application. After you deploy it, you can run (invoke) the remote version of a Lambda function that is part of that deployed application.
Top
Deploy a serverless application
Before you can use this procedure to deploy an AWS serverless application, you must first create the AWS serverless application. Then follow these steps.
Note
To deploy a serverless application that contains an AWS Lambda function, and deploy that function with any nondefault or optional properties, you must first set those properties in the function's corresponding AWS Serverless Application Model (AWS SAM) template file (for example, in a file named template.yaml within the project). For a list of available properties, see AWS::Serverless::Function in the awslabs/serverless-application-model repository on GitHub.


If you need to switch to a different AWS Region to deploy the serverless application, do that now. 


With the Project tool window already open and displaying the project that contains the serverless application's files, right-click the project's template.yaml file. Then choose Deploy Serverless Application.



Complete the Deploy Serverless Application dialog box, and then choose Deploy. 


The AWS Toolkit for JetBrains creates a corresponding AWS CloudFormation stack for the deployment. It also adds the name of the stack to the CloudFormation list in AWS Explorer. If the deployment fails, you can try to figure out why by viewing event logs for the stack.
After you deploy it, you can run (invoke) the remote version of an AWS Lambda function that is part of that deployed application.
Top
Change (update) the settings for a serverless application
Before you can use this procedure to change settings for a serverless application, you must first deploy the AWS serverless application that you want to change. Then follow these steps.
Note
To deploy a serverless application that contains an AWS Lambda function, and deploy that function with any nondefault or optional properties, you must first set those properties in the function's corresponding AWS SAM template file (for example, in a file named template.yaml within the project). For a list of available properties, see AWS::Serverless::Function in the awslabs/serverless-application-model repository on GitHub.


With the Project tool window already open and displaying the project that contains the serverless application's files, open the project's template.yaml file. Change the file's contents to reflect the new settings, and then save and close the file.


If you need to switch to a different AWS Region to deploy the serverless application to, do that now.


Right-click the project's template.yaml file, and then choose Deploy Serverless Application.



Complete the Deploy Serverless Application dialog box, and then choose Deploy. The AWS Toolkit for JetBrains updates the corresponding AWS CloudFormation stack for the deployment. 


If the deployment fails, you can try to figure out why by viewing event logs for the stack.
Top
Delete a serverless application
Before you can use this procedure to delete a serverless application, you must first deploy the AWS serverless application that you want to delete. Then follow these steps.


Open AWS Explorer, if it isn't already open. If you need to switch to a different AWS Region that contains the serverless application, do that now.


Expand CloudFormation.


Right-click the name of the AWS CloudFormation stack that contains the serverless application you want to delete, and then choose Delete CloudFormation Stack.



Enter the stack's name to confirm the deletion, and then choose OK. If the stack deletion succeeds, the AWS Toolkit for JetBrains removes the stack name from the CloudFormation list in AWS Explorer. If the stack deletion fails, you can try to figure out why by viewing event logs for the stack.


Top
Work with AWS Lambda Functions
After you install the AWS Toolkit for JetBrains and then use the toolkit to connect to an AWS account for the first time, you can use the toolkit to work with Lambda functions in the account, as follows.
 Create a function
 Run (invoke) or debug the local version of a function
 Run (invoke) the remote version of a function
 Change (update) the configuration for a function
 Delete a function
Top
Create a function
You can use the AWS Toolkit for JetBrains to create a Lambda function that is part of an AWS serverless application, or you can create a Lambda function by itself.
Create a serverless application that contains a Lambda Function
See the instructions earlier in this topic about creating an AWS serverless application.
Top
Create a standalone function
To complete this procedure, you must first install the AWS Toolkit for JetBrains and, if you haven't yet, connect to an AWS account for the first time. 
Then with IntelliJ IDEA, PyCharm, WebStorm, or JetBrains Rider already running, do one of the following:
 Open AWS Explorer, if it isn't already open. If you need to switch to a different AWS Region to create the function in, do that now. Then right-click Lambda, and choose Create new AWS Lambda.

Complete the Create Function dialog box, and then choose Create Function. The AWS Toolkit for JetBrains creates a corresponding AWS CloudFormation stack for the deployment, and adds the function name to the Lambda list in AWS Explorer. If the deployment fails, you can try to figure out why by viewing event logs for the stack.
 Create a code file that implements a function handler for Java, Python, Node.js, or C#. 
If you need to switch to a different AWS Region to create the remote function to be run (invoked), do that now. Then in the code file, choose the Lambda icon in the gutter next to the function handler, and then choose Create new AWS Lambda. Complete the Create Function dialog box, and then choose Create Function.

Note
If the Lambda icon isn't displayed in the gutter next to the function handler, try displaying it for the current project by selecting the following box in Settings/Preferences: Tools, AWS, Project settings, Show gutter icons for all potential AWS Lambda handlers. Also, if the function handler is already defined in the corresponding AWS SAM template, the Create new AWS Lambda command won't appear.
After you choose Create Function, the AWS Toolkit for JetBrains creates a corresponding function in the Lambda service for the connected AWS account. If the operation succeeds, after you refresh AWS Explorer, the Lambda list displays the name of the new function.
 If you already have a project that contains an AWS Lambda function, and if you need to first switch to a different AWS Region to create the function in, do that now. Then in the code file that contains the function handler for Java, Python, Node.js, or C#, choose the Lambda icon in the gutter next to the function handler. Choose Create new AWS Lambda, complete the Create Function dialog box, and then choose Create Function.

Note
If the Lambda icon isn't displayed in the gutter next to the function handler, try displaying it for the current project by selecting the following box in Settings/Preferences: Tools, AWS, Project settings, Show gutter icons for all potential AWS Lambda handlers. Also, the Create new AWS Lambda command won't be displayed if the function handler is already defined in the corresponding AWS SAM template.
After you choose Create Function, the AWS Toolkit for JetBrains creates a corresponding function in the Lambda service for the connected AWS account. If the operation succeeds, after you refresh AWS Explorer, the new function's name appears in the Lambda list.
After you create the function, you can run (invoke) or debug the local version of the function or run (invoke) the remote version.
Top
Run (invoke) or debug the local version of a function
A local version of an AWS Lambda function is a function whose source code already exists on your local development computer.
To complete this procedure, you must first create the AWS Lambda function that you want to run (invoke) or debug, if you haven't created it already.
Note
To run (invoke) or debug the local version of a Lambda function, and run (invoke) or debug that function locally with any nondefault or optional properties, you must first set those properties in the function's corresponding AWS SAM template file (for example, in a file named template.yaml within the project). For a list of available properties, see AWS::Serverless::Function in the awslabs/serverless-application-model repository on GitHub.


Do one of the following:
    In the code file that contains the function handler for Java, Python, Node.js, or C#, choose the Lambda icon in the gutter next to the function handler. Choose Run '[Local]' or Debug '[Local]'. 

    With the Project tool window already open and displaying the project that contains the function, open the project's template.yaml file. Choose the Run icon in the gutter next to the function's resource definition, and then choose Run '[Local]' or Debug '[Local]'.



Complete the Edit configuration dialog box if it's displayed, and then choose Run or Debug. Results are displayed in the Run or Debug tool window.
    If the Edit configuration dialog box doesn't appear and you want to change the existing configuration, first change its configuration, and then repeat this procedure from the beginning. 
    If the configuration details are missing, expand Templates, AWS Lambda, and then choose Local. Choose OK, and then repeat this procedure from the beginning. 


Top
Run (invoke) the remote version of a function
A remote version of an AWS Lambda function is a function whose source code already exists inside of the Lambda service for an AWS account.
To complete this procedure, you must first install the AWS Toolkit for JetBrains and, if you haven't yet, connect to an AWS account for the first time. Then with IntelliJ IDEA, PyCharm, WebStorm, or JetBrains Rider running, do the following.


Open AWS Explorer, if it isn't already open. If you need to switch to a different AWS Region that contains the function, do that now.


Expand Lambda, and confirm that the name of the function is listed. If it is, skip ahead to step 3 in this procedure.


If the name of the function isn't listed, create the Lambda function that you want to run (invoke). 
If you created the function as part of an AWS serverless application, you must also deploy that application.
If you created the function by creating a code file that implements a function handler for Java, Python, Node.js, or C#, then in the code file, choose the Lambda icon next to the function handler. Then choose Create new AWS Lambda. Complete the Create Function dialog box, and then choose Create Function.


With Lambda open in AWS Explorer, right-click the name of the function, and then choose Run '[Remote]'.



Complete the Edit configuration dialog box if it's displayed, and then choose Run or Debug. Results are displayed in the Run or Debug tool window.
    If the Edit configuration dialog box doesn't appear and you want to change the existing configuration, first change its configuration, and then repeat this procedure from the beginning. 
    If the configuration details are missing, expand Templates, AWS Lambda, and then choose Local. Choose OK, and then repeat this procedure from the beginning. 


Top
Change (update) the configuration for a function
Do one of the following:
 With the code file open that contains the function handler for Java, Python, Node.js, or C#, on the main menu, choose Run, Edit Configurations. Complete the Run/Debug Configurations dialog box, and then choose OK.
 Open AWS Explorer, if it isn't already open. If you need to switch to a different AWS Region that contains the function, do that now. Expand Lambda, choose the name of the function to change the configuration for, and then do one of the following:
   Change settings such as the timeout, memory, environment variables, and execution role – Right-click the name of the function, and then choose Update Function Configuration.

Complete the [Update Configuration](update-configuration-dialog.md) dialog box, and then choose **Update**\.



Change settings such as the input payload – On the main menu, choose Run, Edit Configurations. Complete the Run/Debug Configurations dialog box, and then choose OK.

If the configuration details are missing, first expand Templates, AWS Lambda, and then choose Local (for the local version of the function) or Remote (for the remote version of that same function). Choose OK, and then repeat this procedure from the beginning.)
   Change settings such as the function handler name or Amazon Simple Storage Service (Amazon S3) source bucket – Right-click the function name, and then choose Update Function Code.

Complete the Update Code dialog box, and then choose Update.
   Change other available property settings that aren't listed in the preceding bullets – Change those settings in the function's corresponding AWS SAM template file (for example, in a file named template.yaml within the project). 
For a list of available property settings, see AWS::Serverless::Function in the awslabs/serverless-application-model repository on GitHub. 


Top
Delete a function
You can use the AWS Toolkit for JetBrains to delete an AWS Lambda function that is part of an AWS serverless application. Or you can delete a standalone Lambda function.
Delete a serverless application that contains a function
See the instructions for deleting a serverless application, earlier in this topic.
Top
Delete a standalone function


Open AWS Explorer, if it isn't already open. If you need to switch to a different AWS Region that contains the function, do that now.


Expand Lambda.


Right-click the name of the function to delete, and then choose Delete Function.



Enter the function's name to confirm the deletion, and then choose OK. If the function deletion succeeds, the AWS Toolkit for JetBrains removes the function name from the Lambda list.


Top
Work with AWS CloudFormation stacks
After you install the AWS Toolkit for JetBrains and then use the toolkit to connect to an AWS account for the first time, you can use the toolkit to work with AWS CloudFormation stacks in the account, as follows:
 View event logs for a stack
 Delete a stack
Currently, you can't use the AWS Toolkit for JetBrains to directly create stacks or to change stack settings. However, you can do these tasks indirectly as part of working with AWS serverless applications and AWS Lambda functions, as follows.
Top
Create a stack
Currently, you can't use the AWS Toolkit for JetBrains to create an AWS CloudFormation stack directly. However, whenever you use the toolkit to deploy an AWS serverless application or to create and then deploy an AWS Lambda function, the toolkit deploys these by first creating a corresponding stack in AWS CloudFormation, and then using that stack for the deployment.
Top
Change stack settings
Currently, you can't use the AWS Toolkit for JetBrains to change the settings for an AWS CloudFormation stack directly. However, you can change (update) the settings for an AWS serverless application that belongs to a stack, or change (update) the configuration for an AWS Lambda function that belongs to a stack. Then you deploy that serverless application again or deploy that function, as part of the lifecycle of running (invoking) the remote version of that function, again. 
Top
View event logs for a stack


Open AWS Explorer, if it isn't already open. If the stack is in an AWS Region that's different from the current one, switch to a different AWS Region that contains it.


Expand CloudFormation.


To view event logs for the stack, right-click the stack's name. The AWS Toolkit for JetBrains displays the event logs in the CloudFormation tool window.


To hide or show the CloudFormation tool window, on the main menu, choose View, Tool Windows, CloudFormation.

Top
Deleting a stack


Open AWS Explorer, if it isn't already open. If you need to switch to a different AWS Region that contains the stack, do that now.


Expand CloudFormation.


Right-click the name of the stack to delete, and then choose Delete CloudFormation Stack.



Enter the stack's name to confirm it's deleted, and then choose OK. If the stack deletion succeeds, the AWS Toolkit for JetBrains removes the stack name from the CloudFormation list in AWS Explorer. If the stack deletion fails, you can troubleshoot by viewing the event logs for the stack.


Top
Work with Amazon CloudWatch Logs
After you install the AWS Toolkit for JetBrains and then use the toolkit to connect to an AWS account for the first time, you can use the toolkit to work with Amazon CloudWatch Logs in the account, as follows.
 Viewing CloudWatch log groups and log streams
 Working with CloudWatch log events
Top
Work with Amazon ECS clusters
After you install the AWS Toolkit for JetBrains and then use the toolkit to connect to an AWS account for the first time, you can use the toolkit to work with Amazon ECS clusters in the account, as follows. 
Debug code in a cluster
After you complete the prerequisites, do the following.


Open AWS Explorer, if it isn't already open. If the Amazon ECS cluster is in an AWS Region that's different from the current one, switch to a different AWS Region that contains it.


Expand ECS, and then expand Clusters.


Expand your Amazon ECS cluster, right-click your service, and then choose Enable Cloud Debugging. For example, in the following screenshot, the cluster is named java, and the service is named java-service.



When prompted, choose your Amazon ECS task role, and then choose OK.


The status bar displays the message Configuring Cloud Debugging resource. Wait until the Build Output tab of the Build tool window displays a successful configuration message. (A related pop-up also is displayed in the lower-right corner.) This will take several minutes.
Note
As you enable code debugging in your AWS account for the first time, the AWS Toolkit for JetBrains creates an Amazon S3 bucket in your AWS account. The bucket's name follows the format of do-not-delete-cloud-debug-Region-ID-account-ID. The JetBrains Toolkit stores information in this bucket to enable code debugging. Do not delete this bucket or modify its contents. If you do, code debugging might stop working or produce unexpected results. If you accidentally delete or modify this bucket, the JetBrains Toolkit will try to recreate the bucket. You can also force the JetBrains Toolkit to recreate the bucket by choosing Enable Cloud Debugging again as described earlier, or by choosing Disable Cloud Debugging as described later in this procedure.


With the code you want to debug displayed, in the AWS Explorer, expand ECS, expand Clusters, and then expand your cluster. A service is displayed with a debug icon next to it. This indicates the service is now enabled for cloud debugging. Right-click the service with the debug icon, and then choose Debug.



Complete the Edit configuration dialog box, and then choose Debug.
Note
To make changes to this configuration later, on the menu bar, choose Run, Edit Configurations. Then expand Amazon ECS Service Cloud Debug, and choose the service's name. 


Use the IDE's built-in debugging tools to debug your code as usual.


If you make changes to your code, you can start debugging again. In the AWS Explorer, expand ECS, expand Clusters, and then expand your cluster. Right-click your service with the debug icon next to it, and then choose Debug.


If you make changes to the associated Dockerfile, you must rebuild and republish the Docker image, and then repeat this procedure from the beginning.


To disable debugging, in the AWS Explorer, expand ECS, expand Clusters, and then expand your cluster. Right-click your service with the debug icon next to it, and then choose Disable Cloud Debugging. A pop-up is displayed, confirming that debugging is disabled.


Top
Working with Amazon EventBridge schemas
See Working with Amazon EventBridge schemas.
Top
Work with Amazon S3 buckets and objects
After you install the AWS Toolkit for JetBrains and then use the toolkit to connect to an AWS account for the first time, you can use the toolkit to work with Amazon S3 buckets and objects in the account, as follows.
 Work with Amazon S3 buckets
 Work with Amazon S3 objects
Top