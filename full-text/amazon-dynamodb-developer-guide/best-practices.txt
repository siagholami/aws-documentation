Best Practices for Designing and Architecting with DynamoDB
Use this section to quickly find recommendations for maximizing performance and minimizing throughput costs when working with Amazon DynamoDB.
Contents
 NoSQL Design for DynamoDB
   Differences Between Relational Data Design and NoSQL
   Two Key Concepts for NoSQL Design
   Approaching NoSQL Design
 Best Practices for Designing and Using Partition Keys Effectively
   Using Burst Capacity Effectively
   Understanding DynamoDB Adaptive Capacity
     Boost Throughput Capacity to High-Traffic Partitions
     Isolate Frequently Accessed Items
   Designing Partition Keys to Distribute Your Workload Evenly
   Using Write Sharding to Distribute Workloads Evenly
     Sharding Using Random Suffixes
     Sharding Using Calculated Suffixes
   Distributing Write Activity Efficiently During Data Upload
 Best Practices for Using Sort Keys to Organize Data
   Using Sort Keys for Version Control
 Best Practices for Using Secondary Indexes in DynamoDB
   General Guidelines for Secondary Indexes in DynamoDB
     Use Indexes Efficiently
     Choose Projections Carefully
     Optimize Frequent Queries to Avoid Fetches
     Be Aware of Item-Collection Size Limits When Creating Local Secondary Indexes
   Take Advantage of Sparse Indexes
     Examples of Sparse Indexes in DynamoDB
   Using Global Secondary Indexes for Materialized Aggregation Queries
   Overloading Global Secondary Indexes
   Using Global Secondary Index Write Sharding for Selective Table Queries
   Using Global Secondary Indexes to Create an Eventually Consistent Replica
 Best Practices for Storing Large Items and Attributes
   Compressing Large Attribute Values
   Storing Large Attribute Values in Amazon S3
 Best Practices for Handling Time Series Data in DynamoDB
   Design Pattern for Time Series Data
   Time Series Table Examples
 Best Practices for Managing Many-to-Many Relationships
   Adjacency List Design Pattern
   Materialized Graph Pattern
 Best Practices for Implementing a Hybrid Database System
   If You Don't Want to Migrate Everything to DynamoDB
   How a Hybrid System Can Be Implemented
 Best Practices for Modeling Relational Data in DynamoDB
   First Steps for Modeling Relational Data in DynamoDB
   Example of Modeling Relational Data in DynamoDB
 Best Practices for Querying and Scanning Data
   Performance Considerations for Scans
   Avoiding Sudden Spikes in Read Activity
   Taking Advantage of Parallel Scans
     Choosing TotalSegments
 Best Practices for Using Global Tables