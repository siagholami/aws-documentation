Best Practices for Using Secondary Indexes in DynamoDB
Secondary indexes are often essential to support the query patterns that your application requires. At the same time, overusing secondary indexes or using them inefficiently can add cost and reduce performance unnecessarily.
Contents
 General Guidelines for Secondary Indexes in DynamoDB
   Use Indexes Efficiently
   Choose Projections Carefully
   Optimize Frequent Queries to Avoid Fetches
   Be Aware of Item-Collection Size Limits When Creating Local Secondary Indexes
 Take Advantage of Sparse Indexes
   Examples of Sparse Indexes in DynamoDB
 Using Global Secondary Indexes for Materialized Aggregation Queries
 Overloading Global Secondary Indexes
 Using Global Secondary Index Write Sharding for Selective Table Queries
 Using Global Secondary Indexes to Create an Eventually Consistent Replica