How AWS IoT Greengrass works with IAM
Before you use IAM to manage access to AWS IoT Greengrass, you should understand the IAM features that you can use with AWS IoT Greengrass.



IAM feature
Supported by Greengrass?




Identity-based policies with resource-level permissions
Yes


Resource-based policies
No


Access control lists (ACLs)
No


Tags-based authorization
Yes


Temporary credentials
Yes


Service-linked roles
No


Service roles
Yes



For a high-level view of how other AWS services work with IAM, see AWS services that work with IAM in the IAM User Guide.
Identity-based policies for AWS IoT Greengrass
With IAM identity-based policies, you can specify allowed or denied actions and resources and the conditions under which actions are allowed or denied. AWS IoT Greengrass supports specific actions, resources, and condition keys. To learn about all of the elements that you use in a policy, see IAM JSON policy elements reference in the IAM User Guide.
Actions
The Action element of an IAM identity-based policy describes the specific action or actions that will be allowed or denied by the policy. Policy actions usually have the same name as the associated AWS API operation. The action is used in a policy to grant permissions to perform the associated operation. 
Policy actions for AWS IoT Greengrass use the greengrass: prefix before the action. For example, to allow someone to use the ListGroups API operation to list the groups in their AWS account, you include the greengrass:ListGroups action in their policy. Policy statements must include either an Action or NotAction element. AWS IoT Greengrass defines its own set of actions that describe tasks that you can perform with this service.
To specify multiple actions in a single statement, list them between brackets ([ ]) and separate them with commas, as follows:
"Action": [
    "greengrass:action1",
    "greengrass:action2",
    "greengrass:action3"
]
You can use wildcards (*) to specify multiple actions. For example, to specify all actions that begin with the word List, include the following action:
"Action": "greengrass:List*"
Note
We recommend that you avoid the use of wildcards to specify all available actions for a service. As a best practice, you should grant least privilege and narrowly scope permissions in a policy. For more information, see Grant minimum possible permissions.
For the complete list of AWS IoT Greengrass actions, see Actions Defined by AWS IoT Greengrass in the IAM User Guide.
Resources
The Resource element specifies the object or objects to which the action applies. Statements must include either a Resource or a NotResource element. You specify a resource using an ARN or using the wildcard (*) to indicate that the statement applies to all resources.
The following table contains the AWS IoT Greengrass resource ARNs that can be used in the Resource element of a policy statement. For a mapping of supported resource-level permissions for AWS IoT Greengrass actions, see Actions Defined by AWS IoT Greengrass in the IAM User Guide.



Resource
ARN




 Group 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}


 GroupVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}/versions/${VersionId}


 CertificateAuthority 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}/certificateauthorities/${CertificateAuthorityId}


 Deployment 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/groups/${GroupId}/deployments/${DeploymentId}


 BulkDeployment 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/bulk/deployments/${BulkDeploymentId}


 ConnectorDefinition 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/connectors/${ConnectorDefinitionId}


 ConnectorDefinitionVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/connectors/${ConnectorDefinitionId}/versions/${VersionId}


 CoreDefinition 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/cores/${CoreDefinitionId}


 CoreDefinitionVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/cores/${CoreDefinitionId}/versions/${VersionId}


 DeviceDefinition 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/devices/${DeviceDefinitionId}


 DeviceDefinitionVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/devices/${DeviceDefinitionId}/versions/${VersionId}


 FunctionDefinition 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/functions/${FunctionDefinitionId}


 FunctionDefinitionVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/functions/${FunctionDefinitionId}/versions/${VersionId}


 LoggerDefinition 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/loggers/${LoggerDefinitionId}


 LoggerDefinitionVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/loggers/${LoggerDefinitionId}/versions/${VersionId}


 ResourceDefinition 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/resources/${ResourceDefinitionId}


 ResourceDefinitionVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/resources/${ResourceDefinitionId}/versions/${VersionId}


 SubscriptionDefinition 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/subscriptions/${SubscriptionDefinitionId}


 SubscriptionDefinitionVersion 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/definition/subscriptions/${SubscriptionDefinitionId}/versions/${VersionId}


 ConnectivityInfo 
arn:${Partition}:greengrass:${Region}:${Account}:/greengrass/things/${ThingName}/connectivityInfo



The following example Resource element specifies the ARN of a group in the US West (Oregon) Region in the AWS account 123456789012:
"Resource": "arn:aws:greengrass:us-west-2:123456789012:/greengrass/groups/a1b2c3d4-5678-90ab-cdef-EXAMPLE11111
Or, to specify all groups that belong to an AWS account in a specific AWS Region, use the wildcard in place of the group ID:
"Resource": "arn:aws:greengrass:us-west-2:123456789012:/greengrass/groups/*"
Some AWS IoT Greengrass actions (for example, some list operations), cannot be performed on a specific resource. In those cases, you must use the wildcard alone.
"Resource": "*"
To specify multiple resource ARNs in a statement, list them between brackets ([ ]) and separate them with commas, as follows:
"Resource": [
    "resource-arn1",
    "resource-arn2",
    "resource-arn3"
]
For more information about ARN formats, see Amazon Resource Names (ARNs) and AWS service namespaces in the Amazon Web Services General Reference.
Condition keys
The Condition element (or Condition block) lets you specify conditions in which a statement is in effect. The Condition element is optional. You can create conditional expressions that use condition operators, such as equals or less than, to match the condition in the policy with values in the request. 
If you specify multiple Condition elements in a statement, or multiple keys in a single Condition element, AWS evaluates them using a logical AND operation. If you specify multiple values for a single condition key, AWS evaluates the condition using a logical OR operation. All of the conditions must be met before the statement's permissions are granted.
You can also use placeholder variables when you specify conditions. For example, you can grant an IAM user permission to access a resource only if it is tagged with their IAM user name. For more information, see IAM Policy Elements: Variables and Tags in the IAM User Guide. 
AWS IoT Greengrass supports the following global condition keys.



Key
Description




aws:CurrentTime
Filters access by checking date/time conditions for the current date and time.


aws:EpochTime
Filters access by checking date/time conditions for the current date and time in epoch or Unix time.


aws:MultiFactorAuthAge
Filters access by checking how long ago (in seconds) the security credentials validated by multi-factor authentication (MFA) in the request were issued using MFA.


aws:MultiFactorAuthPresent
Filters access by checking whether multi-factor authentication (MFA) was used to validate the temporary security credentials that made the current request.


aws:RequestTag/${TagKey}
Filters create requests based on the allowed set of values for each of the mandatory tags.


aws:ResourceTag/${TagKey}
Filters actions based on the tag value associated with the resource.


aws:SecureTransport
Filters access by checking whether the request was sent using SSL.


aws:TagKeys
Filters create requests based on the presence of mandatory tags in the request.


aws:UserAgent
Filters access by the requester's client application.



For more information, see AWS global condition context keys in the IAM User Guide.
Examples
To view examples of AWS IoT Greengrass identity-based policies, see Identity-based policy examples for AWS IoT Greengrass.
Resource-based policies for AWS IoT Greengrass
AWS IoT Greengrass does not support resource-based policies.
Access control lists (ACLs)
AWS IoT Greengrass does not support ACLs.
Authorization based on AWS IoT Greengrass tags
You can attach tags to supported AWS IoT Greengrass resources or pass tags in a request to AWS IoT Greengrass. To control access based on tags, you provide tag information in the Condition element of a policy using the aws:ResourceTag/${TagKey}, aws:RequestTag/${TagKey}, or aws:TagKeys condition keys. For more information, see Tagging your AWS IoT Greengrass resources.
IAM roles for AWS IoT Greengrass
An IAM role is an entity within your AWS account that has specific permissions.
Using temporary credentials with AWS IoT Greengrass
Temporary credentials are used to sign in with federation, assume an IAM role, or to assume a cross-account role. You obtain temporary security credentials by calling AWS STS API operations such as AssumeRole or GetFederationToken.
On the Greengrass core, temporary credentials for the group role are made available to user-defined Lambda functions and connectors. If your Lambda functions use the AWS SDK, you don't need to add logic to obtain the credentials because the AWS SDK does this for you.
Service-linked roles
AWS IoT Greengrass does not support service-linked roles.
Service roles
This feature allows a service to assume a service role on your behalf. This role allows the service to access resources in other services to complete an action on your behalf. Service roles appear in your IAM account and are owned by the account. This means that an IAM administrator can change the permissions for this role. However, doing so might break the functionality of the service.
AWS IoT Greengrass uses a service role to access some of your AWS resources on your behalf. For more information, see Greengrass service role.
Choosing an IAM role in the AWS IoT Greengrass console
In the AWS IoT Greengrass console, you might need to choose a Greengrass service role or a Greengrass group role from a list of IAM roles in your account.
 The Greengrass service role allows AWS IoT Greengrass to access your AWS resources in other services on your behalf. Typically, you don't need to choose the service role because the console can create and configure it for you. For more information, see Greengrass service role.
 The Greengrass group role is used to allow Greengrass Lambda functions and connectors in the group to access your AWS resources. It can also give AWS IoT Greengrass permissions to export streams to AWS services and write CloudWatch logs. For more information, see Greengrass group role.