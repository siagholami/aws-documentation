AWS Templates You Can Use to Create Lambda Rotation Functions
This section identifies the AWS managed templates you can use to create a Lambda rotation function for your AWS Secrets Manager secret. These templates associate with the AWS Serverless Application Repository, which uses AWS CloudFormation to create 'stacks' of preconfigured resources. In this case, the templates create a stack that consists of the Lambda function and an IAM role that Secrets Manager can assume to invoke the function when rotation occurs.
To create a Lambda rotation function with any of the following templates, you can copy and paste the ARN of the specified template into the CLI commands described in the topic Rotating AWS Secrets Manager Secrets for Other Databases or Services.
Each of the following templates creates a Lambda rotation function for a different combination of database and rotation strategy. The first bullet under each shows the database or service supported by the function. The second bullet describes the rotation strategy implemented by the function. The third bullet specifies the JSON structure the rotation function expects to find in the SecretString value of the rotated secret.
RDS databases
 RDS MariaDB Single User
 RDS MariaDB Master User
 RDS MySQL Single User
 RDS MySQL Multiple Users
 RDS Oracle Single User
 RDS Oracle Master User
 RDS PostgreSQL Single User
 RDS PostgreSQL Master User
 RDS Microsoft SQLServer Single User
 RDS Microsoft SQLServer Master User
Other databases and services
 MongoDB Single User
 MongoDB Master User
 Amazon Redshift Single User
 Amazon Redshift Master User
 Generic Rotation Function Template
Templates for Amazon RDS Databases
RDS MariaDB Single User
arn:aws:serverlessrepo:us-east-1:1234456789012:applications/SecretsManagerRDSMariaDBRotationSingleUser
 Name: SecretsManagerRDSMariaDBRotationSingleUser
 Supported database/service: MariaDB database hosted on an Amazon Relational Database Service (Amazon RDS) database instance.
 Rotation strategy: This changes the password for a user with credentials stored in the rotated secret. For more information about this strategy, see Rotating AWS Secrets Manager Secrets for One User with a Single Password.
 Expected SecretString structure: 
{
    "engine": "mariadb",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to 3306>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSMariaDBRotationSingleUser/lambda_function.py
RDS MariaDB Master User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSMariaDBRotationMultiUser
 Name: SecretsManagerRDSMariaDBRotationMultiUser
 Supported database/service: MariaDB database hosted on an Amazon RDS database instance.
 Rotation strategy: Two users alternate during rotation by using the credentials of a separate master user, stored in a separate secret. Secrets Manager changes the password of the inactive user before the user becomes the active user. For more information about this strategy, see Rotating AWS Secrets Manager Secrets by Alternating Between Two Existing Users.
 Expected SecretString structure: 
{
    "engine": "mariadb",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to 3306>",
    "masterarn": "<required: the ARN of the master secret used to create 2nd user and change passwords>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSMariaDBRotationMultiUser/lambda_function.py
RDS MySQL Single User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSMySQLRotationSingleUser
 Name: SecretsManagerRDSMySQLRotationSingleUser
 Supported database/service: MySQL database hosted on an Amazon Relational Database Service (Amazon RDS) database instance.
 Rotation strategy: This changes the password for a user with credentials stored in the rotated secret. For more information about this strategy, see Rotating AWS Secrets Manager Secrets for One User with a Single Password.
 Expected SecretString structure: 
{
    "engine": "mysql",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to 3306>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSMySQLRotationSingleUser/lambda_function.py
RDS MySQL Multiple Users
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSMySQLRotationMultiUser
 Name: SecretsManagerRDSMySQLRotationMultiUser
 Supported database/service: MySQL database hosted on an Amazon RDS database instance.
 Rotation strategy: Two users alternate during rotation by using the credentials of a separate master user, stored in a separate secret. Secrets Manager changes the password of the inactive user before the user becomes the active user. For more information about this strategy, see Rotating AWS Secrets Manager Secrets by Alternating Between Two Existing Users.
 Expected SecretString structure: 
{
    "engine": "mysql",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to 3306>",
    "masterarn": "<required: the ARN of the master secret used to create 2nd user and change passwords>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSMySQLRotationMultiUser/lambda_function.py
RDS Oracle Single User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSOracleRotationSingleUser
 Name: SecretsManagerRDSOracleRotationSingleUser
 Supported database/service: Oracle database hosted on an Amazon Relational Database Service (Amazon RDS) database instance.
 Rotation strategy: This changes the password for a user with credentials stored in the rotated secret. For more information about this strategy, see Rotating AWS Secrets Manager Secrets for One User with a Single Password.
 Expected SecretString structure: 
{
    "engine": "oracle",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<required: database name>",
    "port": "<optional: TCP port number. If not specified, defaults to 1521>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSOracleRotationSIngleUser/lambda_function.py
RDS Oracle Master User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSOracleRotationMultiUser
 Name: SecretsManagerRDSOracleRotationMultiUser
 Supported database/service: Oracle database hosted on an Amazon RDS database instance.
 Rotation strategy: Two users alternate during rotation by using the credentials of a separate master user, stored in a separate secret. Secrets Manager changes the password of the inactive user before the user becomes the active user. For more information about this strategy, see Rotating AWS Secrets Manager Secrets by Alternating Between Two Existing Users.
 Expected SecretString structure: 
{
    "engine": "oracle",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<required: database name>",
    "port": "<optional: TCP port number. If not specified, defaults to 1521>",
    "masterarn": "<required: the ARN of the master secret used to create 2nd user and change passwords>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSOracleRotationMultiUser/lambda_function.py
RDS PostgreSQL Single User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSPostgreSQLRotationSingleUser
 Name: SecretsManagerRDSPostgreSQLRotationSingleUser
 Supported database/service: PostgreSQL database hosted on an Amazon RDS database instance.
 Rotation strategy: This changes the password for a user with credentials stored in the rotated secret. For more information about this strategy, see Rotating AWS Secrets Manager Secrets for One User with a Single Password.
 Expected SecretString structure: 
{
    "engine": "postgres",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to 'postgres'>",
    "port": "<optional: TCP port number. If not specified, defaults to 5432>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSPostgreSQLRotationSingleUser/lambda_function.py
RDS PostgreSQL Master User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSPostgreSQLRotationMultiUser
 Name: SecretsManagerRDSPostgreSQLRotationMultiUser
 Supported database/service: PostgreSQL database hosted on an Amazon RDS database instance.
 Rotation strategy: Two users alternate during rotation by using the credentials of a separate master user, stored in a separate secret. Secrets Manager changes the password of the inactive user before the user becomes the active user. For more information about this strategy, see Rotating AWS Secrets Manager Secrets by Alternating Between Two Existing Users.
 Expected SecretString structure: 
{
    "engine": "postgres",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to 'postgres'>",
    "port": "<optional: TCP port number. If not specified, defaults to 5432>",
    "masterarn": "<required: the ARN of the master secret used to create 2nd user and change passwords>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSPostgreSQLRotationMultiUser/lambda_function.py
RDS Microsoft SQLServer Single User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSSQLServerRotationSingleUser
 Name: SecretsManagerRDSSQLServerRotationSingleUser
 Supported database/service: Microsoft SQLServer database hosted on an Amazon RDS database instance.
 Rotation strategy: This changes the password for a user with credentials stored in the rotated secret. For more information about this strategy, see Rotating AWS Secrets Manager Secrets for One User with a Single Password.
 Expected SecretString structure: 
{
    "engine": "sqlserver",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to 'master'>",
    "port": "<optional: TCP port number. If not specified, defaults to 1433>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSSQLServerRotationSingleUser/lambda_function.py
RDS Microsoft SQLServer Master User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRDSSQLServerRotationMultiUser
 Name: SecretsManagerRDSSQLServerRotationMultiUser
 Supported database/service: Microsoft SQLServer database hosted on an Amazon RDS database instance.
 Rotation strategy: Two users alternate during rotation by using the credentials of a separate master user, stored in a separate secret. Secrets Manager changes the password of the inactive user before the user becomes the active user. For more information about this strategy, see Rotating AWS Secrets Manager Secrets by Alternating Between Two Existing Users.
 Expected SecretString structure: 
{
    "engine": "sqlserver",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to 'master'>",
    "port": "<optional: TCP port number. If not specified, defaults to 1433>",
    "masterarn": "<required: the ARN of the master secret used to create 2nd user and change passwords>"
  }
 https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRDSSQLServerRotationMultiUser/lambda_function.py
Templates for Other Databases
MongoDB Single User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerMongoDBRotationSingleUser
 Name: SecretsManagerMongoDBRotationSingleUser
 Supported database/service: MongoDB database version 3.2 or 3.4.
 Rotation strategy: This changes the password for a user with credentials stored in the rotated secret. For more information about this strategy, see Rotating AWS Secrets Manager Secrets for One User with a Single Password.
 Expected SecretString structure: 
{
    "engine": "mongo",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to 27017>"
  }
 Source code: https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerMongoDBRotationSingleUser/lambda_function.py
MongoDB Master User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerMongoDBRotationMultiUser
 Name: SecretsManagerMongoDBRotationMultiUser
 Supported database or service: MongoDB database version 3.2 or 3.4.
 Rotation strategy: Two users alternate during rotation by using the credentials of a separate master user, and stored in a separate secret.Secrets Manager changes the password of the inactive user before the user becomes the active user. For more information about this strategy, see Rotating AWS Secrets Manager Secrets by Alternating Between Two Existing Users.
 Expected SecretString structure: 
{
    "engine": "mongo",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to 27017>",
    "masterarn": "<required: the ARN of the master secret used to create 2nd user and change passwords>"
  }
  https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerMongoDBRotationMultiUser/lambda_function.py
Amazon Redshift Single User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRedShiftRotationSingleUser
 Name: SecretsManagerRedShiftRotationSingleUser
 Supported database/service: Amazon Redshift
 Rotation strategy: This changes the password for a user with credentials stored in the rotated secret. For more information about this strategy, see Rotating AWS Secrets Manager Secrets for One User with a Single Password.
 Expected SecretString structure: 
{
    "engine": "redshift",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to 5439>"
  }
  https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRedshiftRotationSingleUser/lambda_function.py
Amazon Redshift Master User
arn:aws:serverlessrepo:us-east-1:123456789012:applications/SecretsManagerRedShiftRotationMultiUser
 Name: SecretsManagerRedShiftRotationMultiUser
 Supported database/service: Amazon Redshift
 Rotation strategy: Two users alternate during rotation by using the credentials of a separate master user, stored in a separate secret. Secrets Manager changes the password of the inactive user before becomeing the active user. For more information about this strategy, see Rotating AWS Secrets Manager Secrets by Alternating Between Two Existing Users.
 Expected SecretString structure: 
{
    "engine": "redshift",
    "host": "<required: instance host name/resolvable DNS name>",
    "username": "<required: username>",
    "password": "<required: password>",
    "dbname": "<optional: database name. If not specified, defaults to None>",
    "port": "<optional: TCP port number. If not specified, defaults to ?????>",
    "masterarn": "<required: the ARN of the master secret used to create 2nd user and change passwords>"
  }
  https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRedshiftRotationMultiUser/lambda_function.py
Templates for Other Services
Generic Rotation Function Template
arn:aws:serverlessrepo:us-east-1:297356227824:applications/SecretsManagerRotationTemplate
 Name: SecretsManagerRotationTemplate
 Supported database/service: None. You supply the code to interact with whatever service you want.
 Rotation strategy: None. You supply the code to implement whatever rotation strategy you want. For more information about customizing your own function, see Understanding and Customizing Your Lambda Rotation Function.
 Expected SecretString structure: You define this as part of the code that you write.
 Source code: https://github.com/aws-samples/aws-secrets-manager-rotation-lambdas/tree/master/SecretsManagerRotationTemplate/lambda_function.py