Step 2: Create the Lambda Function and API
(Previous step: Step 1: Create and Open the Environment)
In this step, you use the AWS Cloud9 IDE to create the Lambda function and its accompanying API at the same time. AWS Cloud9 stores the new function on the Amazon EC2 instance and deploys a copy of the function to Lambda. AWS Cloud9 also stores the new accompanying API on the instance and deploys a copy of the API to API Gateway.
The Lambda function returns information about the day or time you specify, for example, the day, month, and year, or the current hour, minute, and second.
Currently, you can use the IDE to automatically create functions that use only Node.js or Python. This function uses Node.js.

Make sure you have completed the prerequisites for work with Lambda functions in the AWS Cloud9 IDE for the environment. This includes checking to see whether you must: 
    Set up your IAM group with required access permissions.
    Set up your environment with AWS access credentials.
    Create an execution rule for your Lambda functions.

For more information, see Prepare to work with Lambda functions.


With the IDE open from the previous step, set the AWS Region that you want to create the function in. To do this, on the menu bar, choose AWS Cloud9, Preferences.


In the navigation pane of the Preferences tab, choose AWS Settings.


For AWS Region, select the AWS Region you want to create the function in.



On the edge of the IDE, choose AWS Resources.



Expand the Lambda, if it isn't already expanded. On the toolbar, choose the Create a new Lambda function icon.


In the Create serverless application dialog box, for Function name, type a name for the function (for example, myDateTimeFunction).


For Application name, type a name for the function's containing serverless application (for example, MyDateTimeApplication).


Choose Next.


For Select runtime, choose Node.js 12.x.


For Select blueprint, choose empty-nodejs. This creates some starter code that you work with in the next step.


Choose Next.


For Function trigger, choose API Gateway. This creates an API in API Gateway that you use to run and debug the function in a later step.


For Resource Path, type / (a forward slash). The Resource Path defines a portion of the URL that you use to run and debug the API in a later step. For more information, see Set up API Methods in API Gateway in the API Gateway Developer Guide.


For Security, choose NONE, and then choose Next. This specifies that you don't need any special credentials to run and debug this API.


For Memory (MB), leave the default value of 128 MB, which is sufficient for this tutorial.


For Role, leave the default value of Automatically generate role, and then choose Next. This specifies the access permissions that the function needs to work properly.


Review your choices, and then choose Finish.


AWS Cloud9 creates the function and its related API on the instance. Then it deploys a copy of the function and API to Lambda and API Gateway. The serverless application and function are displayed in the Local Functions and Remote Functions lists in the Lambda pane of the AWS Resources window. The serverless application's and function's component files are displayed in the Environment window. The editor opens the function's code file, index.js.

Note
In addition to the function's code file, AWS Cloud9 creates the following helper files.
.application.json: A hidden file that contains JSON-formatted settings that are specific to the serverless application. AWS Cloud9 uses these settings for its internal use. Do not edit this file.
 .gitignore: A hidden file that contains a list of files Git ignores, if you want to use Git to manage your source code for this function.
 template.yaml: An AWS Serverless Application Model (AWS SAM) template file that contains information about the Lambda function, the related API in API Gateway, and any other related, supported AWS resources. Whenever you update the local version of your function and then upload it to Lambda, AWS Cloud9 calls AWS SAM to use this template file to do the upload. For more information, see Using the AWS Serverless Application Model (AWS SAM) in the AWS Lambda Developer Guide.
The .application.json and .gitignore files are hidden. To show hidden files or hide them if they're shown, in the Environment window, choose the gear icon. Then choose Show Hidden Files.  

Next Step
Step 3: Add Code to the Function