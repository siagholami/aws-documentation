Getting Started in a Browser Script

This browser script example shows you:
 How to access AWS services from a browser script using Amazon Cognito Identity.
 How to turn text into synthesized speech using Amazon Polly.
 How to use a presigner object to create a presigned URL.
The Scenario
Amazon Polly is a cloud service that converts text into lifelike speech. You can use Amazon Polly to develop applications that increase engagement and accessibility. Amazon Polly supports multiple languages and includes a variety of lifelike voices. For more information about Amazon Polly, see the Amazon Polly Developer Guide.
This example shows you how to set up and run a browser script that takes text, sends that text to Amazon Polly, and returns the URL of the synthesized audio of the text for you to play. The browser script uses an Amazon Cognito Identity pool to provide credentials needed to access AWS services. The example demonstrates the basic patterns for loading and using the SDK for JavaScript in browser scripts.
Note
You must run this example in a browser that supports HTML 5 audio to playback the synthesized speech.

The browser script uses the SDK for JavaScript to synthesize text by using the following APIs:
 https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CognitoIdentityCredentials.html constructor
 https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly/Presigner.html constructor
 https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/Polly/Presigner.html#getSynthesizeSpeechUrl-property
Step 1: Create an Amazon Cognito Identity Pool
In this exercise, you create and use an Amazon Cognito Identity pool to provide unauthenticated access to your browser script for the Amazon Polly service. Creating an identity pool also creates two AWS Identity and Access Management (IAM) roles, one to support users authenticated by an identity provider and the other to support unauthenticated guest users.
In this exercise, we will only work with the unauthenticated user role to keep the task focused. You can integrate support for an identity provider and authenticated users later.
To create an Amazon Cognito Identity pool


Sign in to the AWS Management Console and open the Amazon Cognito console at https://console.aws.amazon.com/cognito/.


Choose Manage Identity Pools on the console opening page.


On the next page, choose Create new identity pool.
Note
If there are no other identity pools, the Amazon Cognito console will skip this page and open the next page instead.


In the Getting started wizard, type a name for your identity pool in Identity pool name.


Choose Enable access to unauthenticated identities.


Choose Create Pool.


On the next page, choose View Details to see the names of the two IAM roles created for your identity pool. Make a note of the name of the role for unauthenticated identities. You need this name to add the required policy for Amazon Polly.


Choose Allow.


On the Sample code page, select the Platform of JavaScript. Then, copy or write down the identity pool ID and the Region. You need these values to replace REGION and IDENTITY_POOL_ID in your browser script.


After you create your Amazon Cognito identity pool, you're ready to add permissions for Amazon Polly that are needed by your browser script.
Step 2: Add a Policy to the Created IAM Role
To enable browser script access to Amazon Polly for speech synthesis, use the unauthenticated IAM role created for your Amazon Cognito identity pool. This requires you to add an IAM policy to the role. For more information about IAM roles, see Creating a Role to Delegate Permissions to an AWS Service in the IAM User Guide.
To add an Amazon Polly policy to the IAM role associated with unauthenticated users


Sign in to the AWS Management Console and open the IAM console at https://console.aws.amazon.com/iam/.


In the navigation panel on the left of the page, choose Roles.


In the list of IAM roles, click the link for the unauthenticated identities role previously created by Amazon Cognito.


In the Summary page for this role, choose Attach policies.


In the Attach Permissions page for this role, find and then select the check box for AmazonPollyFullAccess.
Note
You can use this process to enable access to any Amazon or AWS service.


Choose Attach policy.


After you create your Amazon Cognito identity pool and add permissions for Amazon Polly to your IAM role for unauthenticated users, you are ready to build the webpage and browser script.
Step 3: Create the HTML Page
The sample app consists of a single HTML page that contains the user interface and browser script. To begin, create an HTML document and copy the following contents into it. The page includes an input field and button, an <audio> element to play the synthesized speech, and a <p> element to display messages. (Note that the full example is shown at the bottom of this page.)
For more information on the <audio> element, see audio.
```
<!DOCTYPE html>

  

AWS SDK for JavaScript - Browser Getting Started Application



Synthesize
Enter text above then click Synthesize




 (script elements go here) 
 

```
Save the HTML file, naming it polly.html. After you have created the user interface for the application, you're ready to add the browser script code that runs the application.
Step 4: Write the Browser Script
The first thing to do when creating the browser script is to include the SDK for JavaScript by adding a <script> element after the <audio> element in the page.
<script src="https://sdk.amazonaws.com/js/aws-sdk-SDK_VERSION_NUMBER.min.js"></script>
(To find the current SDK_VERSION_NUMBER, see the API Reference for the SDK for JavaScript at https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/index.html.)
Then add a new <script type="text/javascript"> element after the SDK entry. You'll add the browser script to this element. Set the AWS Region and credentials for the SDK. Next, create a function named speakText() that will be invoked as an event handler by the button.
To synthesize speech with Amazon Polly, you must provide a variety of parameters including the sound format of the output, the sampling rate, the ID of the voice to use, and the text to play back. When you initially create the parameters, set the Text: parameter to an empty string; the Text: parameter will be set to the value you retrieve from the <input> element in the webpage.
```
    </p>
<pre><code>    // Initialize the Amazon Cognito credentials provider
    AWS.config.region = 'REGION'; 
    AWS.config.credentials = new AWS.CognitoIdentityCredentials({IdentityPoolId: 'IDENTITY_POOL_ID'});

    // Function invoked by button click
    function speakText() {
        // Create the JSON parameters for getSynthesizeSpeechUrl
        var speechParams = {
            OutputFormat: "mp3",
            SampleRate: "16000",
            Text: "",
            TextType: "text",
            VoiceId: "Matthew"
        };
        speechParams.Text = document.getElementById("textEntry").value;
</code></pre>
<p>```</p>
<p>Amazon Polly returns synthesized speech as an audio stream. The easiest way to play that audio in a browser is to have Amazon Polly make the audio available at a presigned URL you can then set as the <code>src</code> attribute of the <code>&lt;audio&gt;</code> element in the webpage.</p>
<p>Create a new <code>AWS.Polly</code> service object. Then create the <code>AWS.Polly.Presigner</code> object you'll use to create the presigned URL from which the synthesized speech audio can be retrieved. You must pass the speech parameters that you defined as well as the <code>AWS.Polly</code> service object that you created to the <code>AWS.Polly.Presigner</code> constructor.</p>
<p>After you create the presigner object, call the <code>getSynthesizeSpeechUrl</code> method of that object, passing the speech parameters. If successful, this method returns the URL of the synthesized speech, which you then assign to the <code>&lt;audio&gt;</code> element for playback.</p>
<p>```
            // Create the Polly service object and presigner object
            var polly = new AWS.Polly({apiVersion: '2016-06-10'});
            var signer = new AWS.Polly.Presigner(speechParams, polly)</p>
<pre><code>        // Create presigned URL of synthesized speech file
        signer.getSynthesizeSpeechUrl(speechParams, function(error, url) {
        if (error) {
            document.getElementById('result').innerHTML = error;
        } else {
            document.getElementById('audioSource').src = url;
            document.getElementById('audioPlayback').load();
            document.getElementById('result').innerHTML = "Speech ready to play.";
        }
      });
    }
&lt;/script&gt;
</code></pre>
<p>```</p>
<h2 id="step-5-run-the-example">Step 5: Run the Example<a name="getting-started-browser-run-sample"></a></h2>
<p>To run the example app, load <code>polly.html</code> into a web browser. The app should look similar to the following.</p>
<p><img alt="[Web application browser interface]" src="http://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/images/browsergetstarted.png" /></p>
<p>Enter a phrase you want turned to speech in the input box, then choose <strong>Synthesize</strong>. When the audio is ready to play, a message appears. Use the audio player controls to hear the synthesized speech.</p>
<h2 id="full-example">Full Example<a name="getting-started-browser-full-sample"></a></h2>
<p>Here is the full HTML page with the browser script. It's also available <a href="https://github.com/awsdocs/aws-doc-sdk-examples/blob/master/javascript/example_code/browserstart/polly.html">here on GitHub</a>. </p>
<p>```
&lt;!DOCTYPE html&gt;
<html>
  <head>
    <meta charset="UTF-8">
    <title>AWS SDK for JavaScript - Browser Getting Started Application</title>
  </head></p>
<p><body>
    <div id="textToSynth">
      <input autofocus size="23" type="text" id="textEntry" value="It's very good to meet you."/>
      <button class="btn default" onClick="speakText()">Synthesize</button>
      <p id="result">Enter text above then click Synthesize</p>
    </div>
    <audio id="audioPlayback" controls>
      <source id="audioSource" type="audio/mp3" src="">
    </audio>
    <script src="https://sdk.amazonaws.com/js/aws-sdk-2.410.0.min.js">
</p>
<pre><code>    // Initialize the Amazon Cognito credentials provider
    AWS.config.region = 'REGION'; 
    AWS.config.credentials = new AWS.CognitoIdentityCredentials({IdentityPoolId: 'IDENTITY_POOL_ID'});

    // Function invoked by button click
    function speakText() {
        // Create the JSON parameters for getSynthesizeSpeechUrl
        var speechParams = {
            OutputFormat: "mp3",
            SampleRate: "16000",
            Text: "",
            TextType: "text",
            VoiceId: "Matthew"
        };
        speechParams.Text = document.getElementById("textEntry").value;

        // Create the Polly service object and presigner object
        var polly = new AWS.Polly({apiVersion: '2016-06-10'});
        var signer = new AWS.Polly.Presigner(speechParams, polly)

        // Create presigned URL of synthesized speech file
        signer.getSynthesizeSpeechUrl(speechParams, function(error, url) {
        if (error) {
            document.getElementById('result').innerHTML = error;
        } else {
            document.getElementById('audioSource').src = url;
            document.getElementById('audioPlayback').load();
            document.getElementById('result').innerHTML = "Speech ready to play.";
        }
      });
    }
&lt;/script&gt;
</code></pre>
<p></body>
</html>
```</p>
<h2 id="possible-enhancements">Possible Enhancements<a name="getting-started-browser-variations"></a></h2>
<p>Here are variations on this application you can use to further explore using the SDK for JavaScript in a browser script.
 Experiment with other sound output formats.
 Add the option to select any of the various voices provided by Amazon Polly.
 Integrate an identity provider like Facebook or Amazon to use with the authenticated IAM role.</p>