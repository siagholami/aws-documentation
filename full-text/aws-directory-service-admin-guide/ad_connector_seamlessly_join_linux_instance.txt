Seamlessly Join a Linux EC2 Instance to Your AD Connector Directory
This procedure seamlessly joins a Linux EC2 instance to your AD Connector directory.
The following Linux instance distributions and versions are supported:
 Amazon Linux AMI 2018.03.0
 Amazon Linux 2 (64-bit x86)
 Red Hat Enterprise Linux 8 (HVM) (64-bit x86)
 Ubuntu Server 18.04 LTS & Ubuntu Server 16.04 LTS
 CentOS 7 x86-64
 SUSE Linux Enterprise Server 15 SP1
Note
Distributions prior to Ubuntu 14 and Red Hat Enterprise Linux 7 do not support the seamless domain join feature.
Prerequisites
Before you can set up seamless domain join to a Linux EC2 instance, you need to complete the procedures in this section.
Select Your Seamless Domain Join Service Account
You can seamlessly join Linux computers to your on-premises Active Directory domain through AD Connector. To do that, you must create a user account with create computer account permissions to join the computers to the domain. You can use your AD Connector service account if you prefer. Or you can use any other account that has sufficient privileges to join computers to the domain. Although members of the Domain Admins or other groups might have sufficient privileges to join computers to the domain, we do not recommend these. As a best practice, we recommend that you use a service account that has the minimum privileges necessary to join computers to the domain.
To delegate an account with the minimum privileges necessary to join computers to the domain, you can run the following PowerShell commands. You must run these commands from a domain-joined Windows computer with the Installing the Active Directory Administration Tools installed. In addition, you must use an account that has permission to modify the permissions on your Computers OU or container. The PowerShell command sets permissions that allow the service account to create computer objects in your domainâ€™s default computers container. If you prefer using a graphical user interface (GUI) you can use the manual process that is described in Delegate privileges to your service account.
```
$AccountName = 'awsSeamlessDomain'
DO NOT modify anything below this comment.
Getting Active Directory information.
Import-Module 'ActiveDirectory'
$Domain = Get-ADDomain -ErrorAction Stop
$BaseDn = $Domain.DistinguishedName
$ComputersContainer = $Domain.ComputersContainer
$SchemaNamingContext = Get-ADRootDSE | Select-Object -ExpandProperty 'schemaNamingContext'
[System.GUID]$ServicePrincipalNameGuid = (Get-ADObject -SearchBase $SchemaNamingContext -Filter { lDAPDisplayName -eq 'Computer' } -Properties 'schemaIDGUID').schemaIDGUID
Getting Service account Information.
$AccountProperties = Get-ADUser -Identity $AccountName
$AccountSid = New-Object -TypeName 'System.Security.Principal.SecurityIdentifier' $AccountProperties.SID.Value
Getting ACL settings for the Computers container.
$ObjectAcl = Get-ACL -Path "AD:\$ComputersContainer" 
Setting ACL allowing the service account the ability to create child computer objects in the Computers container.
$AddAccessRule = New-Object -TypeName 'System.DirectoryServices.ActiveDirectoryAccessRule' $AccountSid, 'CreateChild', 'Allow', $ServicePrincipalNameGUID, 'All'
$ObjectAcl.AddAccessRule($AddAccessRule)
Set-ACL -AclObject $ObjectAcl -Path "AD:\$ComputersContainer"
```
If you prefer using a graphical user interface (GUI) you can use the manual process to described in Delegate privileges to your service account.
Create the Secrets to Store the Domain Service Account
You can use AWS Secrets Manager to store the domain service account.
To create secrets and store the domain service account information


Sign in to the AWS Management Console and open the AWS Secrets Manager console at https://console.aws.amazon.com/secretsmanager/.


Choose Store a new secret. 


On the Store a new secret page, do the following:


Under Select secret type, choose Other type of secrets.


Under Specify the key/value pairs to be stored in the secret, do the following:


In the first box, enter awsSeamlessDomainUsername. On the same row, in the next box, enter the user name for your service account. For example, if you used the PowerShell command previously, the service account name would be awsSeamlessDomain.
Note
You must enter awsSeamlessDomainUsername exactly as it is. Make sure there are not any leading or ending spaces. Otherwise the domain join will fail. 


Choose Add row.


On the new row, in the first box, enter awsSeamlessDomainPassword. On the same row, in the next box, enter the password for your service account.
Note
You must enter awsSeamlessDomainPassword exactly as it is. Make sure there are not any leading or ending spaces. Otherwise the domain join will fail. 


Under Select the encryption key, choose DefaultEncryptionKey from the menu. Secrets Manager always encrypts the secret when you choose this option, and provides it at no charge to you. You also may choose a key you created.


Choose Next.




Under Secret name, enter a secret name that includes your directory ID using the following format aws/directory-services/d-xxxxxxxxx/seamless-domain-join. This will be used to retrieve secrets in the application.
Note
You must enter aws/directory-services/d-xxxxxxxxx/seamless-domain-join exactly as it is but replace d-xxxxxxxxxx with your directory ID. Make sure that there are no leading or ending spaces. Otherwise the domain join will fail. 


Leave everything else set to defaults, and then choose Next.


Under Configure automatic rotation, choose Disable automatic rotation, and then choose Next.


Review the settings, and then choose Store to save your changes. The Secrets Manager console returns you to the list of secrets in your account with your new secret now included in the list. 


Choose your newly created secret name from the list, and take note of the Secret ARN value. You will need it in the next section.


Create the Required IAM Policy and Role
Use the following prerequisite steps to create a custom policy that allows read-only access to your Secrets Manager seamless domain join secret (which you created earlier), and to create a new LinuxEC2DomainJoin IAM role. 
Create the Secrets Manager IAM Read Policy
You use the IAM console to create a policy that grants read-only access to your Secrets Manager secret.
To create the Secrets Manager IAM read policy


Sign in to the AWS Management Console as a user that has permission to create IAM policies. Then open the IAM console at https://console.aws.amazon.com/iam/.


In the navigation pane, choose Policies.


Choose Create policy.


Choose the JSON tab and copy the text from the following JSON policy document. Then paste it into the JSON text box.
Note
Make sure you replace the Resource ARN with the actual ARN of the secret that you created earlier.


{
       "Version": "2012-10-17",
       "Statement": [
           {
               "Effect": "Allow",
               "Action": [
                   "secretsmanager:GetSecretValue",
                   "secretsmanager:DescribeSecret"
               ],
               "Resource": [
                   "arn:aws:secretsmanager:us-east-1:############:secret:aws/directory-service/d-xxxxxxxxxx/seamless-domain-join-example"
               ]
           }
       ]
   }


When you are finished, choose Review policy. The Policy Validator reports any syntax errors.


On the Review policy page, enter a policy name, such as SM-Secret-Linux-DJ-d-xxxxxxxxxx-Read. Review the Summary section to see the permissions that your policy grants. Then choose Create policy to save your changes. The new policy appears in the list of managed policies and is now ready to attach to an identity.


Note
We recommend you create one policy per secret. Doing so ensures that instances only have access to the appropriate secret and minimizes the impact if an instance is compromised. 
Create the LinuxEC2DomainJoin Role
You use the IAM console to create the role that you will use to domain join your Linux EC2 instance.
To create the LinuxEC2DomainJoin role


Sign in to the AWS Management Console as a user that has permission to create IAM policies. Then open the IAM console at https://console.aws.amazon.com/iam/.


In the navigation pane, choose Roles.


In the content pane, choose Create role.


Under Select type of trusted entity, choose AWS service.


Under Choose a use case choose EC2, and then choose Next: Permissions.


For Filter policies, do the following:


Enter AmazonSSMManagedInstanceCore. Then select the check box for that item in the list.


Enter AmazonSSMDirectoryServiceAccess. Then select the check box for that item in the list.


Enter SM-Secret-Linux-DJ-d-xxxxxxxxxx-Read (or the name of the policy that you created in the previous procedure). Then select the check box for that item in the list.
Note
AmazonSSMDirectoryServiceAccess provides the permissions to join instances to an Active Directory managed by AWS Directory Service. AmazonSSMManagedInstanceCore provides the minimum permissions necessary to use the AWS Systems Manager service. For more information about creating a role with these permissions, and for information about other permissions and policies you can assign to your IAM role, see Create an IAM Instance Profile for Systems Manager in the AWS Systems Manager User Guide.


Choose Next: Tags.


(Optional) Add one or more tag key-value pairs to organize, track, or control access for this role. Then choose Next: Review.


Next to Role name, enter a name for your new role, such as LinuxEC2DomainJoin or another name that you prefer.


(Optional) For Role description, enter a description.


Choose Create role.


Seamlessly Join Your Linux EC2 Instance
Now that you have configured all of the prerequisite tasks, you can use the following procedure to seamlessly join your Linux EC2 instance.
To seamlessly join your Linux EC2 instance


Sign in to the AWS Management Console and open the Amazon EC2 console at https://console.aws.amazon.com/ec2/.


From the Region selector in the navigation bar, choose the same Region as the existing directory.


Choose Launch Instance.


On the Step 1 page, choose Select for the appropriate Amazon Machine Image (AMI).
Note
The AMI used must have AWS Systems Manager (SSM Agent) version 2.3.1644.0 or higher. To check the installed SSM Agent version in your AMI by launching an instance from that AMI, see Getting the currently installed SSM Agent version. If you need to upgrade the SSM Agent, see Installing and configuring SSM Agent on EC2 instances for Linux. 


On the Step 2 page, select the appropriate instance type, and then choose Next: Configure Instance Details. 


On the Step 3 page, do the following, and then choose Next: Add Storage: 


For Network, choose the VPC that your directory was created in. 


For Subnet, choose one of the public subnets in your VPC. The subnet that you choose must have all external traffic routed to an internet gateway. If this is not the case, you won't be able to connect to the instance remotely. 


For Auto-assign Public IP, choose Enable. For more information about public and private IP addressing, see Amazon EC2 Instance IP Addressing in the Amazon EC2 User Guide for Windows Instances. 


For Domain join directory, choose your domain from the list. 


For IAM role, choose the IAM role that you previously created in the prerequisites section Step 2: Create the LinuxEC2DomainJoin Role. 


On both the Step 4 and Step 5 pages, leave the default settings or make changes as needed. Then choose Next on each. 


On the Step 6 page, select a security group that has been configured to allow remote access to the instance from your network. Then choose Review and Launch. 


On the Step 7 page, choose Launch, choose a key pair, and then choose Launch Instance.


Note
If you are performing a seamless domain join with SUSE Linux, a reboot is required before authentications will work. To reboot SUSE from the Linux terminal, type sudo reboot.