How Amazon Lightsail Works with IAM
Last updated: February 18, 2020 
Before you use IAM to manage access to Lightsail, you should understand what IAM features are available to use with Lightsail. To get a high-level view of how Lightsail and other AWS services work with IAM, see AWS Services That Work with IAM in the IAM User Guide.
Lightsail Identity-Based Policies
With IAM identity-based policies, you can specify allowed or denied actions and resources as well as the conditions under which actions are allowed or denied. Lightsail supports specific actions, resources, and condition keys. To learn about all of the elements that you use in a JSON policy, see IAM JSON Policy Elements Reference in the IAM User Guide.
Actions
The Action element of an IAM identity-based policy describes the specific action or actions that will be allowed or denied by the policy. Policy actions usually have the same name as the associated AWS API operation. The action is used in a policy to grant permissions to perform the associated operation. 
Policy actions in Lightsail use the following prefix before the action: lightsail:. For example, to grant someone permission to run a Lightsail instance with the Lightsail CreateInstances API operation, you include the lightsail:CreateInstances action in their policy. Policy statements must include either an Action or NotAction element. Lightsail defines its own set of actions that describe tasks that you can perform with this service.
To specify multiple actions in a single statement, separate them with commas as follows:
"Action": [
      "lightsail:action1",
      "lightsail:action2"
You can specify multiple actions using wildcards (*). For example, to specify all actions that begin with the word Create, include the following action:
"Action": "lightsail:Create*"
To see a list of Lightsail actions, see Actions Defined by Amazon Lightsail in the IAM User Guide.
Resources
The Resource element specifies the object or objects to which the action applies. Statements must include either a Resource or a NotResource element. You specify a resource using an ARN or using the wildcard (*) to indicate that the statement applies to all resources.
The Lightsail instance resource has the following ARN:
arn:${Partition}:lightsail:${Region}:${Account}:Instance/${InstanceId}
For more information about the format of ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
For example, to specify the ea123456-e6b9-4f1d-b518-3ad1234567e6 instance in your statement, use the following ARN:
"Resource": "arn:aws:lightsail:us-east-1:123456789012:Instance/ea123456-e6b9-4f1d-b518-3ad1234567e6"
To specify all instances that belong to a specific account, use the wildcard (*):
"Resource": "arn:aws:lightsail:us-east-1:123456789012:Instance/*"
Some Lightsail actions, such as those for creating resources, cannot be performed on a specific resource. In those cases, you must use the wildcard (*).
"Resource": "*"
Many Lightsail API actions involve multiple resources. For example, AttachDisk attaches a Lightsail block storage disk to an instance, so an IAM user must have permissions to use the disk and the instance. To specify multiple resources in a single statement, separate the ARNs with commas. 
"Resource": [
      "resource1",
      "resource2"
To see a list of Lightsail resource types and their ARNs, see Resources Defined by Amazon Lightsail in the IAM User Guide. To learn with which actions you can specify the ARN of each resource, see Actions Defined by Amazon Lightsail.
Condition Keys
The Condition element (or Condition block) lets you specify conditions in which a statement is in effect. The Condition element is optional. You can build conditional expressions that use condition operators, such as equals or less than, to match the condition in the policy with values in the request. 
If you specify multiple Condition elements in a statement, or multiple keys in a single Condition element, AWS evaluates them using a logical AND operation. If you specify multiple values for a single condition key, AWS evaluates the condition using a logical OR operation. All of the conditions must be met before the statement's permissions are granted.
You can also use placeholder variables when you specify conditions. For example, you can grant an IAM user permission to access a resource only if it is tagged with their IAM user name. For more information, see IAM Policy Elements: Variables and Tags in the IAM User Guide. 
Lightsail does not provide any service-specific condition keys, but it does support using some global condition keys. To see all AWS global condition keys, see AWS Global Condition Context Keys in the IAM User Guide.
To see a list of Lightsail condition keys, see Condition Keys for Amazon Lightsail in the IAM User Guide. To learn with which actions and resources you can use a condition key, see Actions Defined by Amazon Lightsail.
Examples
To view examples of Lightsail identity-based policies, see Amazon Lightsail Identity-Based Policy Examples.
Lightsail Resource-Based Policies
Resource-based policies are JSON policy documents that specify what actions a specified principal can perform on the Lightsail resource and under what conditions. Lightsail supports resource-based permissions policies.
For more information, see Amazon Lightsail Resource-Based Policy Examples.
Access Control Lists (ACLs)
Lightsail does not support Access Control Lists (ACLs).
Authorization Based on Lightsail Tags
You can attach tags to Lightsail resources or pass tags in a request to Lightsail. To control access based on tags, you provide tag information in the condition element of a policy using the lightsail:ResourceTag/key-name, aws:RequestTag/key-name, or aws:TagKeys condition keys. For more information about tagging Lightsail resources, see Tags in Amazon Lightsail.
To view an example identity-based policy for limiting access to a resource based on the tags on that resource, see Allowing Creation and Deletion of Lightsail Resources Based on Tags.
Lightsail IAM Roles
An IAM role is an entity within your AWS account that has specific permissions.
Using Temporary Credentials with Lightsail
You can use temporary credentials to sign in with federation, assume an IAM role, or to assume a cross-account role. You obtain temporary security credentials by calling AWS STS API operations such as AssumeRole or GetFederationToken. 
Lightsail supports using temporary credentials. 
Service-Linked Roles
Service-linked roles allow AWS services to access resources in other services to complete an action on your behalf. Service-linked roles appear in your IAM account and are owned by the service. An IAM administrator can view but not edit the permissions for service-linked roles.
Lightsail supports service-linked roles. For details about creating or managing Lightsail service-linked roles, see Using Service-Linked Roles for Amazon Lightsail.
Service Roles
This feature allows a service to assume a service role on your behalf. This role allows the service to access resources in other services to complete an action on your behalf. Service roles appear in your IAM account and are owned by the account. This means that an IAM administrator can change the permissions for this role. However, doing so might break the functionality of the service.
Lightsail supports service roles. 